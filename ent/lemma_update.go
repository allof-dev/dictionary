// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/allof-dev/dictionary/ent/lemma"
	"github.com/allof-dev/dictionary/ent/predicate"
	"github.com/allof-dev/dictionary/ent/sense"
)

// LemmaUpdate is the builder for updating Lemma entities.
type LemmaUpdate struct {
	config
	hooks    []Hook
	mutation *LemmaMutation
}

// Where appends a list predicates to the LemmaUpdate builder.
func (lu *LemmaUpdate) Where(ps ...predicate.Lemma) *LemmaUpdate {
	lu.mutation.Where(ps...)
	return lu
}

// SetWrittenForm sets the "writtenForm" field.
func (lu *LemmaUpdate) SetWrittenForm(s string) *LemmaUpdate {
	lu.mutation.SetWrittenForm(s)
	return lu
}

// SetNillableWrittenForm sets the "writtenForm" field if the given value is not nil.
func (lu *LemmaUpdate) SetNillableWrittenForm(s *string) *LemmaUpdate {
	if s != nil {
		lu.SetWrittenForm(*s)
	}
	return lu
}

// SetPartOfSpeech sets the "partOfSpeech" field.
func (lu *LemmaUpdate) SetPartOfSpeech(s string) *LemmaUpdate {
	lu.mutation.SetPartOfSpeech(s)
	return lu
}

// SetNillablePartOfSpeech sets the "partOfSpeech" field if the given value is not nil.
func (lu *LemmaUpdate) SetNillablePartOfSpeech(s *string) *LemmaUpdate {
	if s != nil {
		lu.SetPartOfSpeech(*s)
	}
	return lu
}

// AddSenseIDs adds the "senses" edge to the Sense entity by IDs.
func (lu *LemmaUpdate) AddSenseIDs(ids ...string) *LemmaUpdate {
	lu.mutation.AddSenseIDs(ids...)
	return lu
}

// AddSenses adds the "senses" edges to the Sense entity.
func (lu *LemmaUpdate) AddSenses(s ...*Sense) *LemmaUpdate {
	ids := make([]string, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return lu.AddSenseIDs(ids...)
}

// Mutation returns the LemmaMutation object of the builder.
func (lu *LemmaUpdate) Mutation() *LemmaMutation {
	return lu.mutation
}

// ClearSenses clears all "senses" edges to the Sense entity.
func (lu *LemmaUpdate) ClearSenses() *LemmaUpdate {
	lu.mutation.ClearSenses()
	return lu
}

// RemoveSenseIDs removes the "senses" edge to Sense entities by IDs.
func (lu *LemmaUpdate) RemoveSenseIDs(ids ...string) *LemmaUpdate {
	lu.mutation.RemoveSenseIDs(ids...)
	return lu
}

// RemoveSenses removes "senses" edges to Sense entities.
func (lu *LemmaUpdate) RemoveSenses(s ...*Sense) *LemmaUpdate {
	ids := make([]string, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return lu.RemoveSenseIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (lu *LemmaUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, lu.sqlSave, lu.mutation, lu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (lu *LemmaUpdate) SaveX(ctx context.Context) int {
	affected, err := lu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (lu *LemmaUpdate) Exec(ctx context.Context) error {
	_, err := lu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (lu *LemmaUpdate) ExecX(ctx context.Context) {
	if err := lu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (lu *LemmaUpdate) check() error {
	if v, ok := lu.mutation.WrittenForm(); ok {
		if err := lemma.WrittenFormValidator(v); err != nil {
			return &ValidationError{Name: "writtenForm", err: fmt.Errorf(`ent: validator failed for field "Lemma.writtenForm": %w`, err)}
		}
	}
	if v, ok := lu.mutation.PartOfSpeech(); ok {
		if err := lemma.PartOfSpeechValidator(v); err != nil {
			return &ValidationError{Name: "partOfSpeech", err: fmt.Errorf(`ent: validator failed for field "Lemma.partOfSpeech": %w`, err)}
		}
	}
	return nil
}

func (lu *LemmaUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := lu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(lemma.Table, lemma.Columns, sqlgraph.NewFieldSpec(lemma.FieldID, field.TypeString))
	if ps := lu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := lu.mutation.WrittenForm(); ok {
		_spec.SetField(lemma.FieldWrittenForm, field.TypeString, value)
	}
	if value, ok := lu.mutation.PartOfSpeech(); ok {
		_spec.SetField(lemma.FieldPartOfSpeech, field.TypeString, value)
	}
	if lu.mutation.SensesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   lemma.SensesTable,
			Columns: []string{lemma.SensesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(sense.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := lu.mutation.RemovedSensesIDs(); len(nodes) > 0 && !lu.mutation.SensesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   lemma.SensesTable,
			Columns: []string{lemma.SensesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(sense.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := lu.mutation.SensesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   lemma.SensesTable,
			Columns: []string{lemma.SensesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(sense.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, lu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{lemma.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	lu.mutation.done = true
	return n, nil
}

// LemmaUpdateOne is the builder for updating a single Lemma entity.
type LemmaUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *LemmaMutation
}

// SetWrittenForm sets the "writtenForm" field.
func (luo *LemmaUpdateOne) SetWrittenForm(s string) *LemmaUpdateOne {
	luo.mutation.SetWrittenForm(s)
	return luo
}

// SetNillableWrittenForm sets the "writtenForm" field if the given value is not nil.
func (luo *LemmaUpdateOne) SetNillableWrittenForm(s *string) *LemmaUpdateOne {
	if s != nil {
		luo.SetWrittenForm(*s)
	}
	return luo
}

// SetPartOfSpeech sets the "partOfSpeech" field.
func (luo *LemmaUpdateOne) SetPartOfSpeech(s string) *LemmaUpdateOne {
	luo.mutation.SetPartOfSpeech(s)
	return luo
}

// SetNillablePartOfSpeech sets the "partOfSpeech" field if the given value is not nil.
func (luo *LemmaUpdateOne) SetNillablePartOfSpeech(s *string) *LemmaUpdateOne {
	if s != nil {
		luo.SetPartOfSpeech(*s)
	}
	return luo
}

// AddSenseIDs adds the "senses" edge to the Sense entity by IDs.
func (luo *LemmaUpdateOne) AddSenseIDs(ids ...string) *LemmaUpdateOne {
	luo.mutation.AddSenseIDs(ids...)
	return luo
}

// AddSenses adds the "senses" edges to the Sense entity.
func (luo *LemmaUpdateOne) AddSenses(s ...*Sense) *LemmaUpdateOne {
	ids := make([]string, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return luo.AddSenseIDs(ids...)
}

// Mutation returns the LemmaMutation object of the builder.
func (luo *LemmaUpdateOne) Mutation() *LemmaMutation {
	return luo.mutation
}

// ClearSenses clears all "senses" edges to the Sense entity.
func (luo *LemmaUpdateOne) ClearSenses() *LemmaUpdateOne {
	luo.mutation.ClearSenses()
	return luo
}

// RemoveSenseIDs removes the "senses" edge to Sense entities by IDs.
func (luo *LemmaUpdateOne) RemoveSenseIDs(ids ...string) *LemmaUpdateOne {
	luo.mutation.RemoveSenseIDs(ids...)
	return luo
}

// RemoveSenses removes "senses" edges to Sense entities.
func (luo *LemmaUpdateOne) RemoveSenses(s ...*Sense) *LemmaUpdateOne {
	ids := make([]string, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return luo.RemoveSenseIDs(ids...)
}

// Where appends a list predicates to the LemmaUpdate builder.
func (luo *LemmaUpdateOne) Where(ps ...predicate.Lemma) *LemmaUpdateOne {
	luo.mutation.Where(ps...)
	return luo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (luo *LemmaUpdateOne) Select(field string, fields ...string) *LemmaUpdateOne {
	luo.fields = append([]string{field}, fields...)
	return luo
}

// Save executes the query and returns the updated Lemma entity.
func (luo *LemmaUpdateOne) Save(ctx context.Context) (*Lemma, error) {
	return withHooks(ctx, luo.sqlSave, luo.mutation, luo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (luo *LemmaUpdateOne) SaveX(ctx context.Context) *Lemma {
	node, err := luo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (luo *LemmaUpdateOne) Exec(ctx context.Context) error {
	_, err := luo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (luo *LemmaUpdateOne) ExecX(ctx context.Context) {
	if err := luo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (luo *LemmaUpdateOne) check() error {
	if v, ok := luo.mutation.WrittenForm(); ok {
		if err := lemma.WrittenFormValidator(v); err != nil {
			return &ValidationError{Name: "writtenForm", err: fmt.Errorf(`ent: validator failed for field "Lemma.writtenForm": %w`, err)}
		}
	}
	if v, ok := luo.mutation.PartOfSpeech(); ok {
		if err := lemma.PartOfSpeechValidator(v); err != nil {
			return &ValidationError{Name: "partOfSpeech", err: fmt.Errorf(`ent: validator failed for field "Lemma.partOfSpeech": %w`, err)}
		}
	}
	return nil
}

func (luo *LemmaUpdateOne) sqlSave(ctx context.Context) (_node *Lemma, err error) {
	if err := luo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(lemma.Table, lemma.Columns, sqlgraph.NewFieldSpec(lemma.FieldID, field.TypeString))
	id, ok := luo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Lemma.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := luo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, lemma.FieldID)
		for _, f := range fields {
			if !lemma.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != lemma.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := luo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := luo.mutation.WrittenForm(); ok {
		_spec.SetField(lemma.FieldWrittenForm, field.TypeString, value)
	}
	if value, ok := luo.mutation.PartOfSpeech(); ok {
		_spec.SetField(lemma.FieldPartOfSpeech, field.TypeString, value)
	}
	if luo.mutation.SensesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   lemma.SensesTable,
			Columns: []string{lemma.SensesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(sense.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := luo.mutation.RemovedSensesIDs(); len(nodes) > 0 && !luo.mutation.SensesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   lemma.SensesTable,
			Columns: []string{lemma.SensesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(sense.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := luo.mutation.SensesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   lemma.SensesTable,
			Columns: []string{lemma.SensesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(sense.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Lemma{config: luo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, luo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{lemma.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	luo.mutation.done = true
	return _node, nil
}
