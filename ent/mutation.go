// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"sync"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/allof-dev/dictionary/ent/definition"
	"github.com/allof-dev/dictionary/ent/lemma"
	"github.com/allof-dev/dictionary/ent/predicate"
	"github.com/allof-dev/dictionary/ent/sense"
	"github.com/allof-dev/dictionary/ent/senserelation"
	"github.com/allof-dev/dictionary/ent/synset"
	"github.com/allof-dev/dictionary/ent/synsetrelation"
)

const (
	// Operation types.
	OpCreate    = ent.OpCreate
	OpDelete    = ent.OpDelete
	OpDeleteOne = ent.OpDeleteOne
	OpUpdate    = ent.OpUpdate
	OpUpdateOne = ent.OpUpdateOne

	// Node types.
	TypeDefinition     = "Definition"
	TypeLemma          = "Lemma"
	TypeSense          = "Sense"
	TypeSenseRelation  = "SenseRelation"
	TypeSynset         = "Synset"
	TypeSynsetRelation = "SynsetRelation"
)

// DefinitionMutation represents an operation that mutates the Definition nodes in the graph.
type DefinitionMutation struct {
	config
	op            Op
	typ           string
	id            *int
	text          *string
	clearedFields map[string]struct{}
	done          bool
	oldValue      func(context.Context) (*Definition, error)
	predicates    []predicate.Definition
}

var _ ent.Mutation = (*DefinitionMutation)(nil)

// definitionOption allows management of the mutation configuration using functional options.
type definitionOption func(*DefinitionMutation)

// newDefinitionMutation creates new mutation for the Definition entity.
func newDefinitionMutation(c config, op Op, opts ...definitionOption) *DefinitionMutation {
	m := &DefinitionMutation{
		config:        c,
		op:            op,
		typ:           TypeDefinition,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withDefinitionID sets the ID field of the mutation.
func withDefinitionID(id int) definitionOption {
	return func(m *DefinitionMutation) {
		var (
			err   error
			once  sync.Once
			value *Definition
		)
		m.oldValue = func(ctx context.Context) (*Definition, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Definition.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withDefinition sets the old Definition of the mutation.
func withDefinition(node *Definition) definitionOption {
	return func(m *DefinitionMutation) {
		m.oldValue = func(context.Context) (*Definition, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m DefinitionMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m DefinitionMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *DefinitionMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *DefinitionMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Definition.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetText sets the "text" field.
func (m *DefinitionMutation) SetText(s string) {
	m.text = &s
}

// Text returns the value of the "text" field in the mutation.
func (m *DefinitionMutation) Text() (r string, exists bool) {
	v := m.text
	if v == nil {
		return
	}
	return *v, true
}

// OldText returns the old "text" field's value of the Definition entity.
// If the Definition object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *DefinitionMutation) OldText(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldText is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldText requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldText: %w", err)
	}
	return oldValue.Text, nil
}

// ResetText resets all changes to the "text" field.
func (m *DefinitionMutation) ResetText() {
	m.text = nil
}

// Where appends a list predicates to the DefinitionMutation builder.
func (m *DefinitionMutation) Where(ps ...predicate.Definition) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the DefinitionMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *DefinitionMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.Definition, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *DefinitionMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *DefinitionMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (Definition).
func (m *DefinitionMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *DefinitionMutation) Fields() []string {
	fields := make([]string, 0, 1)
	if m.text != nil {
		fields = append(fields, definition.FieldText)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *DefinitionMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case definition.FieldText:
		return m.Text()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *DefinitionMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case definition.FieldText:
		return m.OldText(ctx)
	}
	return nil, fmt.Errorf("unknown Definition field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *DefinitionMutation) SetField(name string, value ent.Value) error {
	switch name {
	case definition.FieldText:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetText(v)
		return nil
	}
	return fmt.Errorf("unknown Definition field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *DefinitionMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *DefinitionMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *DefinitionMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown Definition numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *DefinitionMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *DefinitionMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *DefinitionMutation) ClearField(name string) error {
	return fmt.Errorf("unknown Definition nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *DefinitionMutation) ResetField(name string) error {
	switch name {
	case definition.FieldText:
		m.ResetText()
		return nil
	}
	return fmt.Errorf("unknown Definition field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *DefinitionMutation) AddedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *DefinitionMutation) AddedIDs(name string) []ent.Value {
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *DefinitionMutation) RemovedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *DefinitionMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *DefinitionMutation) ClearedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *DefinitionMutation) EdgeCleared(name string) bool {
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *DefinitionMutation) ClearEdge(name string) error {
	return fmt.Errorf("unknown Definition unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *DefinitionMutation) ResetEdge(name string) error {
	return fmt.Errorf("unknown Definition edge %s", name)
}

// LemmaMutation represents an operation that mutates the Lemma nodes in the graph.
type LemmaMutation struct {
	config
	op            Op
	typ           string
	id            *string
	writtenForm   *string
	partOfSpeech  *string
	clearedFields map[string]struct{}
	senses        map[string]struct{}
	removedsenses map[string]struct{}
	clearedsenses bool
	done          bool
	oldValue      func(context.Context) (*Lemma, error)
	predicates    []predicate.Lemma
}

var _ ent.Mutation = (*LemmaMutation)(nil)

// lemmaOption allows management of the mutation configuration using functional options.
type lemmaOption func(*LemmaMutation)

// newLemmaMutation creates new mutation for the Lemma entity.
func newLemmaMutation(c config, op Op, opts ...lemmaOption) *LemmaMutation {
	m := &LemmaMutation{
		config:        c,
		op:            op,
		typ:           TypeLemma,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withLemmaID sets the ID field of the mutation.
func withLemmaID(id string) lemmaOption {
	return func(m *LemmaMutation) {
		var (
			err   error
			once  sync.Once
			value *Lemma
		)
		m.oldValue = func(ctx context.Context) (*Lemma, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Lemma.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withLemma sets the old Lemma of the mutation.
func withLemma(node *Lemma) lemmaOption {
	return func(m *LemmaMutation) {
		m.oldValue = func(context.Context) (*Lemma, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m LemmaMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m LemmaMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of Lemma entities.
func (m *LemmaMutation) SetID(id string) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *LemmaMutation) ID() (id string, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *LemmaMutation) IDs(ctx context.Context) ([]string, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []string{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Lemma.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetWrittenForm sets the "writtenForm" field.
func (m *LemmaMutation) SetWrittenForm(s string) {
	m.writtenForm = &s
}

// WrittenForm returns the value of the "writtenForm" field in the mutation.
func (m *LemmaMutation) WrittenForm() (r string, exists bool) {
	v := m.writtenForm
	if v == nil {
		return
	}
	return *v, true
}

// OldWrittenForm returns the old "writtenForm" field's value of the Lemma entity.
// If the Lemma object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *LemmaMutation) OldWrittenForm(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldWrittenForm is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldWrittenForm requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldWrittenForm: %w", err)
	}
	return oldValue.WrittenForm, nil
}

// ResetWrittenForm resets all changes to the "writtenForm" field.
func (m *LemmaMutation) ResetWrittenForm() {
	m.writtenForm = nil
}

// SetPartOfSpeech sets the "partOfSpeech" field.
func (m *LemmaMutation) SetPartOfSpeech(s string) {
	m.partOfSpeech = &s
}

// PartOfSpeech returns the value of the "partOfSpeech" field in the mutation.
func (m *LemmaMutation) PartOfSpeech() (r string, exists bool) {
	v := m.partOfSpeech
	if v == nil {
		return
	}
	return *v, true
}

// OldPartOfSpeech returns the old "partOfSpeech" field's value of the Lemma entity.
// If the Lemma object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *LemmaMutation) OldPartOfSpeech(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldPartOfSpeech is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldPartOfSpeech requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldPartOfSpeech: %w", err)
	}
	return oldValue.PartOfSpeech, nil
}

// ResetPartOfSpeech resets all changes to the "partOfSpeech" field.
func (m *LemmaMutation) ResetPartOfSpeech() {
	m.partOfSpeech = nil
}

// AddSenseIDs adds the "senses" edge to the Sense entity by ids.
func (m *LemmaMutation) AddSenseIDs(ids ...string) {
	if m.senses == nil {
		m.senses = make(map[string]struct{})
	}
	for i := range ids {
		m.senses[ids[i]] = struct{}{}
	}
}

// ClearSenses clears the "senses" edge to the Sense entity.
func (m *LemmaMutation) ClearSenses() {
	m.clearedsenses = true
}

// SensesCleared reports if the "senses" edge to the Sense entity was cleared.
func (m *LemmaMutation) SensesCleared() bool {
	return m.clearedsenses
}

// RemoveSenseIDs removes the "senses" edge to the Sense entity by IDs.
func (m *LemmaMutation) RemoveSenseIDs(ids ...string) {
	if m.removedsenses == nil {
		m.removedsenses = make(map[string]struct{})
	}
	for i := range ids {
		delete(m.senses, ids[i])
		m.removedsenses[ids[i]] = struct{}{}
	}
}

// RemovedSenses returns the removed IDs of the "senses" edge to the Sense entity.
func (m *LemmaMutation) RemovedSensesIDs() (ids []string) {
	for id := range m.removedsenses {
		ids = append(ids, id)
	}
	return
}

// SensesIDs returns the "senses" edge IDs in the mutation.
func (m *LemmaMutation) SensesIDs() (ids []string) {
	for id := range m.senses {
		ids = append(ids, id)
	}
	return
}

// ResetSenses resets all changes to the "senses" edge.
func (m *LemmaMutation) ResetSenses() {
	m.senses = nil
	m.clearedsenses = false
	m.removedsenses = nil
}

// Where appends a list predicates to the LemmaMutation builder.
func (m *LemmaMutation) Where(ps ...predicate.Lemma) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the LemmaMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *LemmaMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.Lemma, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *LemmaMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *LemmaMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (Lemma).
func (m *LemmaMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *LemmaMutation) Fields() []string {
	fields := make([]string, 0, 2)
	if m.writtenForm != nil {
		fields = append(fields, lemma.FieldWrittenForm)
	}
	if m.partOfSpeech != nil {
		fields = append(fields, lemma.FieldPartOfSpeech)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *LemmaMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case lemma.FieldWrittenForm:
		return m.WrittenForm()
	case lemma.FieldPartOfSpeech:
		return m.PartOfSpeech()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *LemmaMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case lemma.FieldWrittenForm:
		return m.OldWrittenForm(ctx)
	case lemma.FieldPartOfSpeech:
		return m.OldPartOfSpeech(ctx)
	}
	return nil, fmt.Errorf("unknown Lemma field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *LemmaMutation) SetField(name string, value ent.Value) error {
	switch name {
	case lemma.FieldWrittenForm:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetWrittenForm(v)
		return nil
	case lemma.FieldPartOfSpeech:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetPartOfSpeech(v)
		return nil
	}
	return fmt.Errorf("unknown Lemma field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *LemmaMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *LemmaMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *LemmaMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown Lemma numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *LemmaMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *LemmaMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *LemmaMutation) ClearField(name string) error {
	return fmt.Errorf("unknown Lemma nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *LemmaMutation) ResetField(name string) error {
	switch name {
	case lemma.FieldWrittenForm:
		m.ResetWrittenForm()
		return nil
	case lemma.FieldPartOfSpeech:
		m.ResetPartOfSpeech()
		return nil
	}
	return fmt.Errorf("unknown Lemma field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *LemmaMutation) AddedEdges() []string {
	edges := make([]string, 0, 1)
	if m.senses != nil {
		edges = append(edges, lemma.EdgeSenses)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *LemmaMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case lemma.EdgeSenses:
		ids := make([]ent.Value, 0, len(m.senses))
		for id := range m.senses {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *LemmaMutation) RemovedEdges() []string {
	edges := make([]string, 0, 1)
	if m.removedsenses != nil {
		edges = append(edges, lemma.EdgeSenses)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *LemmaMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case lemma.EdgeSenses:
		ids := make([]ent.Value, 0, len(m.removedsenses))
		for id := range m.removedsenses {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *LemmaMutation) ClearedEdges() []string {
	edges := make([]string, 0, 1)
	if m.clearedsenses {
		edges = append(edges, lemma.EdgeSenses)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *LemmaMutation) EdgeCleared(name string) bool {
	switch name {
	case lemma.EdgeSenses:
		return m.clearedsenses
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *LemmaMutation) ClearEdge(name string) error {
	switch name {
	}
	return fmt.Errorf("unknown Lemma unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *LemmaMutation) ResetEdge(name string) error {
	switch name {
	case lemma.EdgeSenses:
		m.ResetSenses()
		return nil
	}
	return fmt.Errorf("unknown Lemma edge %s", name)
}

// SenseMutation represents an operation that mutates the Sense nodes in the graph.
type SenseMutation struct {
	config
	op             Op
	typ            string
	id             *string
	clearedFields  map[string]struct{}
	synset         *string
	clearedsynset  bool
	lemma          *string
	clearedlemma   bool
	relFrom        map[int]struct{}
	removedrelFrom map[int]struct{}
	clearedrelFrom bool
	relTo          map[int]struct{}
	removedrelTo   map[int]struct{}
	clearedrelTo   bool
	done           bool
	oldValue       func(context.Context) (*Sense, error)
	predicates     []predicate.Sense
}

var _ ent.Mutation = (*SenseMutation)(nil)

// senseOption allows management of the mutation configuration using functional options.
type senseOption func(*SenseMutation)

// newSenseMutation creates new mutation for the Sense entity.
func newSenseMutation(c config, op Op, opts ...senseOption) *SenseMutation {
	m := &SenseMutation{
		config:        c,
		op:            op,
		typ:           TypeSense,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withSenseID sets the ID field of the mutation.
func withSenseID(id string) senseOption {
	return func(m *SenseMutation) {
		var (
			err   error
			once  sync.Once
			value *Sense
		)
		m.oldValue = func(ctx context.Context) (*Sense, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Sense.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withSense sets the old Sense of the mutation.
func withSense(node *Sense) senseOption {
	return func(m *SenseMutation) {
		m.oldValue = func(context.Context) (*Sense, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m SenseMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m SenseMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of Sense entities.
func (m *SenseMutation) SetID(id string) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *SenseMutation) ID() (id string, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *SenseMutation) IDs(ctx context.Context) ([]string, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []string{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Sense.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetSynsetID sets the "synset" edge to the Synset entity by id.
func (m *SenseMutation) SetSynsetID(id string) {
	m.synset = &id
}

// ClearSynset clears the "synset" edge to the Synset entity.
func (m *SenseMutation) ClearSynset() {
	m.clearedsynset = true
}

// SynsetCleared reports if the "synset" edge to the Synset entity was cleared.
func (m *SenseMutation) SynsetCleared() bool {
	return m.clearedsynset
}

// SynsetID returns the "synset" edge ID in the mutation.
func (m *SenseMutation) SynsetID() (id string, exists bool) {
	if m.synset != nil {
		return *m.synset, true
	}
	return
}

// SynsetIDs returns the "synset" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// SynsetID instead. It exists only for internal usage by the builders.
func (m *SenseMutation) SynsetIDs() (ids []string) {
	if id := m.synset; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetSynset resets all changes to the "synset" edge.
func (m *SenseMutation) ResetSynset() {
	m.synset = nil
	m.clearedsynset = false
}

// SetLemmaID sets the "lemma" edge to the Lemma entity by id.
func (m *SenseMutation) SetLemmaID(id string) {
	m.lemma = &id
}

// ClearLemma clears the "lemma" edge to the Lemma entity.
func (m *SenseMutation) ClearLemma() {
	m.clearedlemma = true
}

// LemmaCleared reports if the "lemma" edge to the Lemma entity was cleared.
func (m *SenseMutation) LemmaCleared() bool {
	return m.clearedlemma
}

// LemmaID returns the "lemma" edge ID in the mutation.
func (m *SenseMutation) LemmaID() (id string, exists bool) {
	if m.lemma != nil {
		return *m.lemma, true
	}
	return
}

// LemmaIDs returns the "lemma" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// LemmaID instead. It exists only for internal usage by the builders.
func (m *SenseMutation) LemmaIDs() (ids []string) {
	if id := m.lemma; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetLemma resets all changes to the "lemma" edge.
func (m *SenseMutation) ResetLemma() {
	m.lemma = nil
	m.clearedlemma = false
}

// AddRelFromIDs adds the "relFrom" edge to the SenseRelation entity by ids.
func (m *SenseMutation) AddRelFromIDs(ids ...int) {
	if m.relFrom == nil {
		m.relFrom = make(map[int]struct{})
	}
	for i := range ids {
		m.relFrom[ids[i]] = struct{}{}
	}
}

// ClearRelFrom clears the "relFrom" edge to the SenseRelation entity.
func (m *SenseMutation) ClearRelFrom() {
	m.clearedrelFrom = true
}

// RelFromCleared reports if the "relFrom" edge to the SenseRelation entity was cleared.
func (m *SenseMutation) RelFromCleared() bool {
	return m.clearedrelFrom
}

// RemoveRelFromIDs removes the "relFrom" edge to the SenseRelation entity by IDs.
func (m *SenseMutation) RemoveRelFromIDs(ids ...int) {
	if m.removedrelFrom == nil {
		m.removedrelFrom = make(map[int]struct{})
	}
	for i := range ids {
		delete(m.relFrom, ids[i])
		m.removedrelFrom[ids[i]] = struct{}{}
	}
}

// RemovedRelFrom returns the removed IDs of the "relFrom" edge to the SenseRelation entity.
func (m *SenseMutation) RemovedRelFromIDs() (ids []int) {
	for id := range m.removedrelFrom {
		ids = append(ids, id)
	}
	return
}

// RelFromIDs returns the "relFrom" edge IDs in the mutation.
func (m *SenseMutation) RelFromIDs() (ids []int) {
	for id := range m.relFrom {
		ids = append(ids, id)
	}
	return
}

// ResetRelFrom resets all changes to the "relFrom" edge.
func (m *SenseMutation) ResetRelFrom() {
	m.relFrom = nil
	m.clearedrelFrom = false
	m.removedrelFrom = nil
}

// AddRelToIDs adds the "relTo" edge to the SenseRelation entity by ids.
func (m *SenseMutation) AddRelToIDs(ids ...int) {
	if m.relTo == nil {
		m.relTo = make(map[int]struct{})
	}
	for i := range ids {
		m.relTo[ids[i]] = struct{}{}
	}
}

// ClearRelTo clears the "relTo" edge to the SenseRelation entity.
func (m *SenseMutation) ClearRelTo() {
	m.clearedrelTo = true
}

// RelToCleared reports if the "relTo" edge to the SenseRelation entity was cleared.
func (m *SenseMutation) RelToCleared() bool {
	return m.clearedrelTo
}

// RemoveRelToIDs removes the "relTo" edge to the SenseRelation entity by IDs.
func (m *SenseMutation) RemoveRelToIDs(ids ...int) {
	if m.removedrelTo == nil {
		m.removedrelTo = make(map[int]struct{})
	}
	for i := range ids {
		delete(m.relTo, ids[i])
		m.removedrelTo[ids[i]] = struct{}{}
	}
}

// RemovedRelTo returns the removed IDs of the "relTo" edge to the SenseRelation entity.
func (m *SenseMutation) RemovedRelToIDs() (ids []int) {
	for id := range m.removedrelTo {
		ids = append(ids, id)
	}
	return
}

// RelToIDs returns the "relTo" edge IDs in the mutation.
func (m *SenseMutation) RelToIDs() (ids []int) {
	for id := range m.relTo {
		ids = append(ids, id)
	}
	return
}

// ResetRelTo resets all changes to the "relTo" edge.
func (m *SenseMutation) ResetRelTo() {
	m.relTo = nil
	m.clearedrelTo = false
	m.removedrelTo = nil
}

// Where appends a list predicates to the SenseMutation builder.
func (m *SenseMutation) Where(ps ...predicate.Sense) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the SenseMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *SenseMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.Sense, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *SenseMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *SenseMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (Sense).
func (m *SenseMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *SenseMutation) Fields() []string {
	fields := make([]string, 0, 0)
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *SenseMutation) Field(name string) (ent.Value, bool) {
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *SenseMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	return nil, fmt.Errorf("unknown Sense field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *SenseMutation) SetField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown Sense field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *SenseMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *SenseMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *SenseMutation) AddField(name string, value ent.Value) error {
	return fmt.Errorf("unknown Sense numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *SenseMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *SenseMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *SenseMutation) ClearField(name string) error {
	return fmt.Errorf("unknown Sense nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *SenseMutation) ResetField(name string) error {
	return fmt.Errorf("unknown Sense field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *SenseMutation) AddedEdges() []string {
	edges := make([]string, 0, 4)
	if m.synset != nil {
		edges = append(edges, sense.EdgeSynset)
	}
	if m.lemma != nil {
		edges = append(edges, sense.EdgeLemma)
	}
	if m.relFrom != nil {
		edges = append(edges, sense.EdgeRelFrom)
	}
	if m.relTo != nil {
		edges = append(edges, sense.EdgeRelTo)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *SenseMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case sense.EdgeSynset:
		if id := m.synset; id != nil {
			return []ent.Value{*id}
		}
	case sense.EdgeLemma:
		if id := m.lemma; id != nil {
			return []ent.Value{*id}
		}
	case sense.EdgeRelFrom:
		ids := make([]ent.Value, 0, len(m.relFrom))
		for id := range m.relFrom {
			ids = append(ids, id)
		}
		return ids
	case sense.EdgeRelTo:
		ids := make([]ent.Value, 0, len(m.relTo))
		for id := range m.relTo {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *SenseMutation) RemovedEdges() []string {
	edges := make([]string, 0, 4)
	if m.removedrelFrom != nil {
		edges = append(edges, sense.EdgeRelFrom)
	}
	if m.removedrelTo != nil {
		edges = append(edges, sense.EdgeRelTo)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *SenseMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case sense.EdgeRelFrom:
		ids := make([]ent.Value, 0, len(m.removedrelFrom))
		for id := range m.removedrelFrom {
			ids = append(ids, id)
		}
		return ids
	case sense.EdgeRelTo:
		ids := make([]ent.Value, 0, len(m.removedrelTo))
		for id := range m.removedrelTo {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *SenseMutation) ClearedEdges() []string {
	edges := make([]string, 0, 4)
	if m.clearedsynset {
		edges = append(edges, sense.EdgeSynset)
	}
	if m.clearedlemma {
		edges = append(edges, sense.EdgeLemma)
	}
	if m.clearedrelFrom {
		edges = append(edges, sense.EdgeRelFrom)
	}
	if m.clearedrelTo {
		edges = append(edges, sense.EdgeRelTo)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *SenseMutation) EdgeCleared(name string) bool {
	switch name {
	case sense.EdgeSynset:
		return m.clearedsynset
	case sense.EdgeLemma:
		return m.clearedlemma
	case sense.EdgeRelFrom:
		return m.clearedrelFrom
	case sense.EdgeRelTo:
		return m.clearedrelTo
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *SenseMutation) ClearEdge(name string) error {
	switch name {
	case sense.EdgeSynset:
		m.ClearSynset()
		return nil
	case sense.EdgeLemma:
		m.ClearLemma()
		return nil
	}
	return fmt.Errorf("unknown Sense unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *SenseMutation) ResetEdge(name string) error {
	switch name {
	case sense.EdgeSynset:
		m.ResetSynset()
		return nil
	case sense.EdgeLemma:
		m.ResetLemma()
		return nil
	case sense.EdgeRelFrom:
		m.ResetRelFrom()
		return nil
	case sense.EdgeRelTo:
		m.ResetRelTo()
		return nil
	}
	return fmt.Errorf("unknown Sense edge %s", name)
}

// SenseRelationMutation represents an operation that mutates the SenseRelation nodes in the graph.
type SenseRelationMutation struct {
	config
	op            Op
	typ           string
	id            *int
	relType       *string
	clearedFields map[string]struct{}
	from          *string
	clearedfrom   bool
	to            *string
	clearedto     bool
	done          bool
	oldValue      func(context.Context) (*SenseRelation, error)
	predicates    []predicate.SenseRelation
}

var _ ent.Mutation = (*SenseRelationMutation)(nil)

// senserelationOption allows management of the mutation configuration using functional options.
type senserelationOption func(*SenseRelationMutation)

// newSenseRelationMutation creates new mutation for the SenseRelation entity.
func newSenseRelationMutation(c config, op Op, opts ...senserelationOption) *SenseRelationMutation {
	m := &SenseRelationMutation{
		config:        c,
		op:            op,
		typ:           TypeSenseRelation,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withSenseRelationID sets the ID field of the mutation.
func withSenseRelationID(id int) senserelationOption {
	return func(m *SenseRelationMutation) {
		var (
			err   error
			once  sync.Once
			value *SenseRelation
		)
		m.oldValue = func(ctx context.Context) (*SenseRelation, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().SenseRelation.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withSenseRelation sets the old SenseRelation of the mutation.
func withSenseRelation(node *SenseRelation) senserelationOption {
	return func(m *SenseRelationMutation) {
		m.oldValue = func(context.Context) (*SenseRelation, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m SenseRelationMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m SenseRelationMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *SenseRelationMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *SenseRelationMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().SenseRelation.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetRelType sets the "relType" field.
func (m *SenseRelationMutation) SetRelType(s string) {
	m.relType = &s
}

// RelType returns the value of the "relType" field in the mutation.
func (m *SenseRelationMutation) RelType() (r string, exists bool) {
	v := m.relType
	if v == nil {
		return
	}
	return *v, true
}

// OldRelType returns the old "relType" field's value of the SenseRelation entity.
// If the SenseRelation object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SenseRelationMutation) OldRelType(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldRelType is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldRelType requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldRelType: %w", err)
	}
	return oldValue.RelType, nil
}

// ResetRelType resets all changes to the "relType" field.
func (m *SenseRelationMutation) ResetRelType() {
	m.relType = nil
}

// SetFromID sets the "from" edge to the Sense entity by id.
func (m *SenseRelationMutation) SetFromID(id string) {
	m.from = &id
}

// ClearFrom clears the "from" edge to the Sense entity.
func (m *SenseRelationMutation) ClearFrom() {
	m.clearedfrom = true
}

// FromCleared reports if the "from" edge to the Sense entity was cleared.
func (m *SenseRelationMutation) FromCleared() bool {
	return m.clearedfrom
}

// FromID returns the "from" edge ID in the mutation.
func (m *SenseRelationMutation) FromID() (id string, exists bool) {
	if m.from != nil {
		return *m.from, true
	}
	return
}

// FromIDs returns the "from" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// FromID instead. It exists only for internal usage by the builders.
func (m *SenseRelationMutation) FromIDs() (ids []string) {
	if id := m.from; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetFrom resets all changes to the "from" edge.
func (m *SenseRelationMutation) ResetFrom() {
	m.from = nil
	m.clearedfrom = false
}

// SetToID sets the "to" edge to the Sense entity by id.
func (m *SenseRelationMutation) SetToID(id string) {
	m.to = &id
}

// ClearTo clears the "to" edge to the Sense entity.
func (m *SenseRelationMutation) ClearTo() {
	m.clearedto = true
}

// ToCleared reports if the "to" edge to the Sense entity was cleared.
func (m *SenseRelationMutation) ToCleared() bool {
	return m.clearedto
}

// ToID returns the "to" edge ID in the mutation.
func (m *SenseRelationMutation) ToID() (id string, exists bool) {
	if m.to != nil {
		return *m.to, true
	}
	return
}

// ToIDs returns the "to" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// ToID instead. It exists only for internal usage by the builders.
func (m *SenseRelationMutation) ToIDs() (ids []string) {
	if id := m.to; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetTo resets all changes to the "to" edge.
func (m *SenseRelationMutation) ResetTo() {
	m.to = nil
	m.clearedto = false
}

// Where appends a list predicates to the SenseRelationMutation builder.
func (m *SenseRelationMutation) Where(ps ...predicate.SenseRelation) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the SenseRelationMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *SenseRelationMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.SenseRelation, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *SenseRelationMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *SenseRelationMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (SenseRelation).
func (m *SenseRelationMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *SenseRelationMutation) Fields() []string {
	fields := make([]string, 0, 1)
	if m.relType != nil {
		fields = append(fields, senserelation.FieldRelType)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *SenseRelationMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case senserelation.FieldRelType:
		return m.RelType()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *SenseRelationMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case senserelation.FieldRelType:
		return m.OldRelType(ctx)
	}
	return nil, fmt.Errorf("unknown SenseRelation field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *SenseRelationMutation) SetField(name string, value ent.Value) error {
	switch name {
	case senserelation.FieldRelType:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetRelType(v)
		return nil
	}
	return fmt.Errorf("unknown SenseRelation field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *SenseRelationMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *SenseRelationMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *SenseRelationMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown SenseRelation numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *SenseRelationMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *SenseRelationMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *SenseRelationMutation) ClearField(name string) error {
	return fmt.Errorf("unknown SenseRelation nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *SenseRelationMutation) ResetField(name string) error {
	switch name {
	case senserelation.FieldRelType:
		m.ResetRelType()
		return nil
	}
	return fmt.Errorf("unknown SenseRelation field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *SenseRelationMutation) AddedEdges() []string {
	edges := make([]string, 0, 2)
	if m.from != nil {
		edges = append(edges, senserelation.EdgeFrom)
	}
	if m.to != nil {
		edges = append(edges, senserelation.EdgeTo)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *SenseRelationMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case senserelation.EdgeFrom:
		if id := m.from; id != nil {
			return []ent.Value{*id}
		}
	case senserelation.EdgeTo:
		if id := m.to; id != nil {
			return []ent.Value{*id}
		}
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *SenseRelationMutation) RemovedEdges() []string {
	edges := make([]string, 0, 2)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *SenseRelationMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *SenseRelationMutation) ClearedEdges() []string {
	edges := make([]string, 0, 2)
	if m.clearedfrom {
		edges = append(edges, senserelation.EdgeFrom)
	}
	if m.clearedto {
		edges = append(edges, senserelation.EdgeTo)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *SenseRelationMutation) EdgeCleared(name string) bool {
	switch name {
	case senserelation.EdgeFrom:
		return m.clearedfrom
	case senserelation.EdgeTo:
		return m.clearedto
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *SenseRelationMutation) ClearEdge(name string) error {
	switch name {
	case senserelation.EdgeFrom:
		m.ClearFrom()
		return nil
	case senserelation.EdgeTo:
		m.ClearTo()
		return nil
	}
	return fmt.Errorf("unknown SenseRelation unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *SenseRelationMutation) ResetEdge(name string) error {
	switch name {
	case senserelation.EdgeFrom:
		m.ResetFrom()
		return nil
	case senserelation.EdgeTo:
		m.ResetTo()
		return nil
	}
	return fmt.Errorf("unknown SenseRelation edge %s", name)
}

// SynsetMutation represents an operation that mutates the Synset nodes in the graph.
type SynsetMutation struct {
	config
	op                 Op
	typ                string
	id                 *string
	partOfSpeech       *string
	clearedFields      map[string]struct{}
	definitions        map[int]struct{}
	removeddefinitions map[int]struct{}
	cleareddefinitions bool
	sense              map[string]struct{}
	removedsense       map[string]struct{}
	clearedsense       bool
	relFrom            map[int]struct{}
	removedrelFrom     map[int]struct{}
	clearedrelFrom     bool
	relTo              map[int]struct{}
	removedrelTo       map[int]struct{}
	clearedrelTo       bool
	done               bool
	oldValue           func(context.Context) (*Synset, error)
	predicates         []predicate.Synset
}

var _ ent.Mutation = (*SynsetMutation)(nil)

// synsetOption allows management of the mutation configuration using functional options.
type synsetOption func(*SynsetMutation)

// newSynsetMutation creates new mutation for the Synset entity.
func newSynsetMutation(c config, op Op, opts ...synsetOption) *SynsetMutation {
	m := &SynsetMutation{
		config:        c,
		op:            op,
		typ:           TypeSynset,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withSynsetID sets the ID field of the mutation.
func withSynsetID(id string) synsetOption {
	return func(m *SynsetMutation) {
		var (
			err   error
			once  sync.Once
			value *Synset
		)
		m.oldValue = func(ctx context.Context) (*Synset, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Synset.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withSynset sets the old Synset of the mutation.
func withSynset(node *Synset) synsetOption {
	return func(m *SynsetMutation) {
		m.oldValue = func(context.Context) (*Synset, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m SynsetMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m SynsetMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of Synset entities.
func (m *SynsetMutation) SetID(id string) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *SynsetMutation) ID() (id string, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *SynsetMutation) IDs(ctx context.Context) ([]string, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []string{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Synset.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetPartOfSpeech sets the "partOfSpeech" field.
func (m *SynsetMutation) SetPartOfSpeech(s string) {
	m.partOfSpeech = &s
}

// PartOfSpeech returns the value of the "partOfSpeech" field in the mutation.
func (m *SynsetMutation) PartOfSpeech() (r string, exists bool) {
	v := m.partOfSpeech
	if v == nil {
		return
	}
	return *v, true
}

// OldPartOfSpeech returns the old "partOfSpeech" field's value of the Synset entity.
// If the Synset object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SynsetMutation) OldPartOfSpeech(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldPartOfSpeech is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldPartOfSpeech requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldPartOfSpeech: %w", err)
	}
	return oldValue.PartOfSpeech, nil
}

// ResetPartOfSpeech resets all changes to the "partOfSpeech" field.
func (m *SynsetMutation) ResetPartOfSpeech() {
	m.partOfSpeech = nil
}

// AddDefinitionIDs adds the "definitions" edge to the Definition entity by ids.
func (m *SynsetMutation) AddDefinitionIDs(ids ...int) {
	if m.definitions == nil {
		m.definitions = make(map[int]struct{})
	}
	for i := range ids {
		m.definitions[ids[i]] = struct{}{}
	}
}

// ClearDefinitions clears the "definitions" edge to the Definition entity.
func (m *SynsetMutation) ClearDefinitions() {
	m.cleareddefinitions = true
}

// DefinitionsCleared reports if the "definitions" edge to the Definition entity was cleared.
func (m *SynsetMutation) DefinitionsCleared() bool {
	return m.cleareddefinitions
}

// RemoveDefinitionIDs removes the "definitions" edge to the Definition entity by IDs.
func (m *SynsetMutation) RemoveDefinitionIDs(ids ...int) {
	if m.removeddefinitions == nil {
		m.removeddefinitions = make(map[int]struct{})
	}
	for i := range ids {
		delete(m.definitions, ids[i])
		m.removeddefinitions[ids[i]] = struct{}{}
	}
}

// RemovedDefinitions returns the removed IDs of the "definitions" edge to the Definition entity.
func (m *SynsetMutation) RemovedDefinitionsIDs() (ids []int) {
	for id := range m.removeddefinitions {
		ids = append(ids, id)
	}
	return
}

// DefinitionsIDs returns the "definitions" edge IDs in the mutation.
func (m *SynsetMutation) DefinitionsIDs() (ids []int) {
	for id := range m.definitions {
		ids = append(ids, id)
	}
	return
}

// ResetDefinitions resets all changes to the "definitions" edge.
func (m *SynsetMutation) ResetDefinitions() {
	m.definitions = nil
	m.cleareddefinitions = false
	m.removeddefinitions = nil
}

// AddSenseIDs adds the "sense" edge to the Sense entity by ids.
func (m *SynsetMutation) AddSenseIDs(ids ...string) {
	if m.sense == nil {
		m.sense = make(map[string]struct{})
	}
	for i := range ids {
		m.sense[ids[i]] = struct{}{}
	}
}

// ClearSense clears the "sense" edge to the Sense entity.
func (m *SynsetMutation) ClearSense() {
	m.clearedsense = true
}

// SenseCleared reports if the "sense" edge to the Sense entity was cleared.
func (m *SynsetMutation) SenseCleared() bool {
	return m.clearedsense
}

// RemoveSenseIDs removes the "sense" edge to the Sense entity by IDs.
func (m *SynsetMutation) RemoveSenseIDs(ids ...string) {
	if m.removedsense == nil {
		m.removedsense = make(map[string]struct{})
	}
	for i := range ids {
		delete(m.sense, ids[i])
		m.removedsense[ids[i]] = struct{}{}
	}
}

// RemovedSense returns the removed IDs of the "sense" edge to the Sense entity.
func (m *SynsetMutation) RemovedSenseIDs() (ids []string) {
	for id := range m.removedsense {
		ids = append(ids, id)
	}
	return
}

// SenseIDs returns the "sense" edge IDs in the mutation.
func (m *SynsetMutation) SenseIDs() (ids []string) {
	for id := range m.sense {
		ids = append(ids, id)
	}
	return
}

// ResetSense resets all changes to the "sense" edge.
func (m *SynsetMutation) ResetSense() {
	m.sense = nil
	m.clearedsense = false
	m.removedsense = nil
}

// AddRelFromIDs adds the "relFrom" edge to the SynsetRelation entity by ids.
func (m *SynsetMutation) AddRelFromIDs(ids ...int) {
	if m.relFrom == nil {
		m.relFrom = make(map[int]struct{})
	}
	for i := range ids {
		m.relFrom[ids[i]] = struct{}{}
	}
}

// ClearRelFrom clears the "relFrom" edge to the SynsetRelation entity.
func (m *SynsetMutation) ClearRelFrom() {
	m.clearedrelFrom = true
}

// RelFromCleared reports if the "relFrom" edge to the SynsetRelation entity was cleared.
func (m *SynsetMutation) RelFromCleared() bool {
	return m.clearedrelFrom
}

// RemoveRelFromIDs removes the "relFrom" edge to the SynsetRelation entity by IDs.
func (m *SynsetMutation) RemoveRelFromIDs(ids ...int) {
	if m.removedrelFrom == nil {
		m.removedrelFrom = make(map[int]struct{})
	}
	for i := range ids {
		delete(m.relFrom, ids[i])
		m.removedrelFrom[ids[i]] = struct{}{}
	}
}

// RemovedRelFrom returns the removed IDs of the "relFrom" edge to the SynsetRelation entity.
func (m *SynsetMutation) RemovedRelFromIDs() (ids []int) {
	for id := range m.removedrelFrom {
		ids = append(ids, id)
	}
	return
}

// RelFromIDs returns the "relFrom" edge IDs in the mutation.
func (m *SynsetMutation) RelFromIDs() (ids []int) {
	for id := range m.relFrom {
		ids = append(ids, id)
	}
	return
}

// ResetRelFrom resets all changes to the "relFrom" edge.
func (m *SynsetMutation) ResetRelFrom() {
	m.relFrom = nil
	m.clearedrelFrom = false
	m.removedrelFrom = nil
}

// AddRelToIDs adds the "relTo" edge to the SynsetRelation entity by ids.
func (m *SynsetMutation) AddRelToIDs(ids ...int) {
	if m.relTo == nil {
		m.relTo = make(map[int]struct{})
	}
	for i := range ids {
		m.relTo[ids[i]] = struct{}{}
	}
}

// ClearRelTo clears the "relTo" edge to the SynsetRelation entity.
func (m *SynsetMutation) ClearRelTo() {
	m.clearedrelTo = true
}

// RelToCleared reports if the "relTo" edge to the SynsetRelation entity was cleared.
func (m *SynsetMutation) RelToCleared() bool {
	return m.clearedrelTo
}

// RemoveRelToIDs removes the "relTo" edge to the SynsetRelation entity by IDs.
func (m *SynsetMutation) RemoveRelToIDs(ids ...int) {
	if m.removedrelTo == nil {
		m.removedrelTo = make(map[int]struct{})
	}
	for i := range ids {
		delete(m.relTo, ids[i])
		m.removedrelTo[ids[i]] = struct{}{}
	}
}

// RemovedRelTo returns the removed IDs of the "relTo" edge to the SynsetRelation entity.
func (m *SynsetMutation) RemovedRelToIDs() (ids []int) {
	for id := range m.removedrelTo {
		ids = append(ids, id)
	}
	return
}

// RelToIDs returns the "relTo" edge IDs in the mutation.
func (m *SynsetMutation) RelToIDs() (ids []int) {
	for id := range m.relTo {
		ids = append(ids, id)
	}
	return
}

// ResetRelTo resets all changes to the "relTo" edge.
func (m *SynsetMutation) ResetRelTo() {
	m.relTo = nil
	m.clearedrelTo = false
	m.removedrelTo = nil
}

// Where appends a list predicates to the SynsetMutation builder.
func (m *SynsetMutation) Where(ps ...predicate.Synset) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the SynsetMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *SynsetMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.Synset, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *SynsetMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *SynsetMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (Synset).
func (m *SynsetMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *SynsetMutation) Fields() []string {
	fields := make([]string, 0, 1)
	if m.partOfSpeech != nil {
		fields = append(fields, synset.FieldPartOfSpeech)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *SynsetMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case synset.FieldPartOfSpeech:
		return m.PartOfSpeech()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *SynsetMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case synset.FieldPartOfSpeech:
		return m.OldPartOfSpeech(ctx)
	}
	return nil, fmt.Errorf("unknown Synset field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *SynsetMutation) SetField(name string, value ent.Value) error {
	switch name {
	case synset.FieldPartOfSpeech:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetPartOfSpeech(v)
		return nil
	}
	return fmt.Errorf("unknown Synset field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *SynsetMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *SynsetMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *SynsetMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown Synset numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *SynsetMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *SynsetMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *SynsetMutation) ClearField(name string) error {
	return fmt.Errorf("unknown Synset nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *SynsetMutation) ResetField(name string) error {
	switch name {
	case synset.FieldPartOfSpeech:
		m.ResetPartOfSpeech()
		return nil
	}
	return fmt.Errorf("unknown Synset field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *SynsetMutation) AddedEdges() []string {
	edges := make([]string, 0, 4)
	if m.definitions != nil {
		edges = append(edges, synset.EdgeDefinitions)
	}
	if m.sense != nil {
		edges = append(edges, synset.EdgeSense)
	}
	if m.relFrom != nil {
		edges = append(edges, synset.EdgeRelFrom)
	}
	if m.relTo != nil {
		edges = append(edges, synset.EdgeRelTo)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *SynsetMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case synset.EdgeDefinitions:
		ids := make([]ent.Value, 0, len(m.definitions))
		for id := range m.definitions {
			ids = append(ids, id)
		}
		return ids
	case synset.EdgeSense:
		ids := make([]ent.Value, 0, len(m.sense))
		for id := range m.sense {
			ids = append(ids, id)
		}
		return ids
	case synset.EdgeRelFrom:
		ids := make([]ent.Value, 0, len(m.relFrom))
		for id := range m.relFrom {
			ids = append(ids, id)
		}
		return ids
	case synset.EdgeRelTo:
		ids := make([]ent.Value, 0, len(m.relTo))
		for id := range m.relTo {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *SynsetMutation) RemovedEdges() []string {
	edges := make([]string, 0, 4)
	if m.removeddefinitions != nil {
		edges = append(edges, synset.EdgeDefinitions)
	}
	if m.removedsense != nil {
		edges = append(edges, synset.EdgeSense)
	}
	if m.removedrelFrom != nil {
		edges = append(edges, synset.EdgeRelFrom)
	}
	if m.removedrelTo != nil {
		edges = append(edges, synset.EdgeRelTo)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *SynsetMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case synset.EdgeDefinitions:
		ids := make([]ent.Value, 0, len(m.removeddefinitions))
		for id := range m.removeddefinitions {
			ids = append(ids, id)
		}
		return ids
	case synset.EdgeSense:
		ids := make([]ent.Value, 0, len(m.removedsense))
		for id := range m.removedsense {
			ids = append(ids, id)
		}
		return ids
	case synset.EdgeRelFrom:
		ids := make([]ent.Value, 0, len(m.removedrelFrom))
		for id := range m.removedrelFrom {
			ids = append(ids, id)
		}
		return ids
	case synset.EdgeRelTo:
		ids := make([]ent.Value, 0, len(m.removedrelTo))
		for id := range m.removedrelTo {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *SynsetMutation) ClearedEdges() []string {
	edges := make([]string, 0, 4)
	if m.cleareddefinitions {
		edges = append(edges, synset.EdgeDefinitions)
	}
	if m.clearedsense {
		edges = append(edges, synset.EdgeSense)
	}
	if m.clearedrelFrom {
		edges = append(edges, synset.EdgeRelFrom)
	}
	if m.clearedrelTo {
		edges = append(edges, synset.EdgeRelTo)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *SynsetMutation) EdgeCleared(name string) bool {
	switch name {
	case synset.EdgeDefinitions:
		return m.cleareddefinitions
	case synset.EdgeSense:
		return m.clearedsense
	case synset.EdgeRelFrom:
		return m.clearedrelFrom
	case synset.EdgeRelTo:
		return m.clearedrelTo
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *SynsetMutation) ClearEdge(name string) error {
	switch name {
	}
	return fmt.Errorf("unknown Synset unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *SynsetMutation) ResetEdge(name string) error {
	switch name {
	case synset.EdgeDefinitions:
		m.ResetDefinitions()
		return nil
	case synset.EdgeSense:
		m.ResetSense()
		return nil
	case synset.EdgeRelFrom:
		m.ResetRelFrom()
		return nil
	case synset.EdgeRelTo:
		m.ResetRelTo()
		return nil
	}
	return fmt.Errorf("unknown Synset edge %s", name)
}

// SynsetRelationMutation represents an operation that mutates the SynsetRelation nodes in the graph.
type SynsetRelationMutation struct {
	config
	op            Op
	typ           string
	id            *int
	relType       *string
	clearedFields map[string]struct{}
	from          *string
	clearedfrom   bool
	to            *string
	clearedto     bool
	done          bool
	oldValue      func(context.Context) (*SynsetRelation, error)
	predicates    []predicate.SynsetRelation
}

var _ ent.Mutation = (*SynsetRelationMutation)(nil)

// synsetrelationOption allows management of the mutation configuration using functional options.
type synsetrelationOption func(*SynsetRelationMutation)

// newSynsetRelationMutation creates new mutation for the SynsetRelation entity.
func newSynsetRelationMutation(c config, op Op, opts ...synsetrelationOption) *SynsetRelationMutation {
	m := &SynsetRelationMutation{
		config:        c,
		op:            op,
		typ:           TypeSynsetRelation,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withSynsetRelationID sets the ID field of the mutation.
func withSynsetRelationID(id int) synsetrelationOption {
	return func(m *SynsetRelationMutation) {
		var (
			err   error
			once  sync.Once
			value *SynsetRelation
		)
		m.oldValue = func(ctx context.Context) (*SynsetRelation, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().SynsetRelation.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withSynsetRelation sets the old SynsetRelation of the mutation.
func withSynsetRelation(node *SynsetRelation) synsetrelationOption {
	return func(m *SynsetRelationMutation) {
		m.oldValue = func(context.Context) (*SynsetRelation, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m SynsetRelationMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m SynsetRelationMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *SynsetRelationMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *SynsetRelationMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().SynsetRelation.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetRelType sets the "relType" field.
func (m *SynsetRelationMutation) SetRelType(s string) {
	m.relType = &s
}

// RelType returns the value of the "relType" field in the mutation.
func (m *SynsetRelationMutation) RelType() (r string, exists bool) {
	v := m.relType
	if v == nil {
		return
	}
	return *v, true
}

// OldRelType returns the old "relType" field's value of the SynsetRelation entity.
// If the SynsetRelation object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SynsetRelationMutation) OldRelType(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldRelType is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldRelType requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldRelType: %w", err)
	}
	return oldValue.RelType, nil
}

// ResetRelType resets all changes to the "relType" field.
func (m *SynsetRelationMutation) ResetRelType() {
	m.relType = nil
}

// SetFromID sets the "from" edge to the Synset entity by id.
func (m *SynsetRelationMutation) SetFromID(id string) {
	m.from = &id
}

// ClearFrom clears the "from" edge to the Synset entity.
func (m *SynsetRelationMutation) ClearFrom() {
	m.clearedfrom = true
}

// FromCleared reports if the "from" edge to the Synset entity was cleared.
func (m *SynsetRelationMutation) FromCleared() bool {
	return m.clearedfrom
}

// FromID returns the "from" edge ID in the mutation.
func (m *SynsetRelationMutation) FromID() (id string, exists bool) {
	if m.from != nil {
		return *m.from, true
	}
	return
}

// FromIDs returns the "from" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// FromID instead. It exists only for internal usage by the builders.
func (m *SynsetRelationMutation) FromIDs() (ids []string) {
	if id := m.from; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetFrom resets all changes to the "from" edge.
func (m *SynsetRelationMutation) ResetFrom() {
	m.from = nil
	m.clearedfrom = false
}

// SetToID sets the "to" edge to the Synset entity by id.
func (m *SynsetRelationMutation) SetToID(id string) {
	m.to = &id
}

// ClearTo clears the "to" edge to the Synset entity.
func (m *SynsetRelationMutation) ClearTo() {
	m.clearedto = true
}

// ToCleared reports if the "to" edge to the Synset entity was cleared.
func (m *SynsetRelationMutation) ToCleared() bool {
	return m.clearedto
}

// ToID returns the "to" edge ID in the mutation.
func (m *SynsetRelationMutation) ToID() (id string, exists bool) {
	if m.to != nil {
		return *m.to, true
	}
	return
}

// ToIDs returns the "to" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// ToID instead. It exists only for internal usage by the builders.
func (m *SynsetRelationMutation) ToIDs() (ids []string) {
	if id := m.to; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetTo resets all changes to the "to" edge.
func (m *SynsetRelationMutation) ResetTo() {
	m.to = nil
	m.clearedto = false
}

// Where appends a list predicates to the SynsetRelationMutation builder.
func (m *SynsetRelationMutation) Where(ps ...predicate.SynsetRelation) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the SynsetRelationMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *SynsetRelationMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.SynsetRelation, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *SynsetRelationMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *SynsetRelationMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (SynsetRelation).
func (m *SynsetRelationMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *SynsetRelationMutation) Fields() []string {
	fields := make([]string, 0, 1)
	if m.relType != nil {
		fields = append(fields, synsetrelation.FieldRelType)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *SynsetRelationMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case synsetrelation.FieldRelType:
		return m.RelType()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *SynsetRelationMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case synsetrelation.FieldRelType:
		return m.OldRelType(ctx)
	}
	return nil, fmt.Errorf("unknown SynsetRelation field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *SynsetRelationMutation) SetField(name string, value ent.Value) error {
	switch name {
	case synsetrelation.FieldRelType:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetRelType(v)
		return nil
	}
	return fmt.Errorf("unknown SynsetRelation field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *SynsetRelationMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *SynsetRelationMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *SynsetRelationMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown SynsetRelation numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *SynsetRelationMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *SynsetRelationMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *SynsetRelationMutation) ClearField(name string) error {
	return fmt.Errorf("unknown SynsetRelation nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *SynsetRelationMutation) ResetField(name string) error {
	switch name {
	case synsetrelation.FieldRelType:
		m.ResetRelType()
		return nil
	}
	return fmt.Errorf("unknown SynsetRelation field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *SynsetRelationMutation) AddedEdges() []string {
	edges := make([]string, 0, 2)
	if m.from != nil {
		edges = append(edges, synsetrelation.EdgeFrom)
	}
	if m.to != nil {
		edges = append(edges, synsetrelation.EdgeTo)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *SynsetRelationMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case synsetrelation.EdgeFrom:
		if id := m.from; id != nil {
			return []ent.Value{*id}
		}
	case synsetrelation.EdgeTo:
		if id := m.to; id != nil {
			return []ent.Value{*id}
		}
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *SynsetRelationMutation) RemovedEdges() []string {
	edges := make([]string, 0, 2)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *SynsetRelationMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *SynsetRelationMutation) ClearedEdges() []string {
	edges := make([]string, 0, 2)
	if m.clearedfrom {
		edges = append(edges, synsetrelation.EdgeFrom)
	}
	if m.clearedto {
		edges = append(edges, synsetrelation.EdgeTo)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *SynsetRelationMutation) EdgeCleared(name string) bool {
	switch name {
	case synsetrelation.EdgeFrom:
		return m.clearedfrom
	case synsetrelation.EdgeTo:
		return m.clearedto
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *SynsetRelationMutation) ClearEdge(name string) error {
	switch name {
	case synsetrelation.EdgeFrom:
		m.ClearFrom()
		return nil
	case synsetrelation.EdgeTo:
		m.ClearTo()
		return nil
	}
	return fmt.Errorf("unknown SynsetRelation unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *SynsetRelationMutation) ResetEdge(name string) error {
	switch name {
	case synsetrelation.EdgeFrom:
		m.ResetFrom()
		return nil
	case synsetrelation.EdgeTo:
		m.ResetTo()
		return nil
	}
	return fmt.Errorf("unknown SynsetRelation edge %s", name)
}
