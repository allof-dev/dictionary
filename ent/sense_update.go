// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/allof-dev/dictionary/ent/lemma"
	"github.com/allof-dev/dictionary/ent/predicate"
	"github.com/allof-dev/dictionary/ent/sense"
	"github.com/allof-dev/dictionary/ent/synset"
)

// SenseUpdate is the builder for updating Sense entities.
type SenseUpdate struct {
	config
	hooks    []Hook
	mutation *SenseMutation
}

// Where appends a list predicates to the SenseUpdate builder.
func (su *SenseUpdate) Where(ps ...predicate.Sense) *SenseUpdate {
	su.mutation.Where(ps...)
	return su
}

// SetSynsetID sets the "synset" edge to the Synset entity by ID.
func (su *SenseUpdate) SetSynsetID(id string) *SenseUpdate {
	su.mutation.SetSynsetID(id)
	return su
}

// SetNillableSynsetID sets the "synset" edge to the Synset entity by ID if the given value is not nil.
func (su *SenseUpdate) SetNillableSynsetID(id *string) *SenseUpdate {
	if id != nil {
		su = su.SetSynsetID(*id)
	}
	return su
}

// SetSynset sets the "synset" edge to the Synset entity.
func (su *SenseUpdate) SetSynset(s *Synset) *SenseUpdate {
	return su.SetSynsetID(s.ID)
}

// SetLemmaID sets the "lemma" edge to the Lemma entity by ID.
func (su *SenseUpdate) SetLemmaID(id string) *SenseUpdate {
	su.mutation.SetLemmaID(id)
	return su
}

// SetNillableLemmaID sets the "lemma" edge to the Lemma entity by ID if the given value is not nil.
func (su *SenseUpdate) SetNillableLemmaID(id *string) *SenseUpdate {
	if id != nil {
		su = su.SetLemmaID(*id)
	}
	return su
}

// SetLemma sets the "lemma" edge to the Lemma entity.
func (su *SenseUpdate) SetLemma(l *Lemma) *SenseUpdate {
	return su.SetLemmaID(l.ID)
}

// Mutation returns the SenseMutation object of the builder.
func (su *SenseUpdate) Mutation() *SenseMutation {
	return su.mutation
}

// ClearSynset clears the "synset" edge to the Synset entity.
func (su *SenseUpdate) ClearSynset() *SenseUpdate {
	su.mutation.ClearSynset()
	return su
}

// ClearLemma clears the "lemma" edge to the Lemma entity.
func (su *SenseUpdate) ClearLemma() *SenseUpdate {
	su.mutation.ClearLemma()
	return su
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (su *SenseUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, su.sqlSave, su.mutation, su.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (su *SenseUpdate) SaveX(ctx context.Context) int {
	affected, err := su.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (su *SenseUpdate) Exec(ctx context.Context) error {
	_, err := su.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (su *SenseUpdate) ExecX(ctx context.Context) {
	if err := su.Exec(ctx); err != nil {
		panic(err)
	}
}

func (su *SenseUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(sense.Table, sense.Columns, sqlgraph.NewFieldSpec(sense.FieldID, field.TypeString))
	if ps := su.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if su.mutation.SynsetCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   sense.SynsetTable,
			Columns: []string{sense.SynsetColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(synset.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := su.mutation.SynsetIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   sense.SynsetTable,
			Columns: []string{sense.SynsetColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(synset.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if su.mutation.LemmaCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   sense.LemmaTable,
			Columns: []string{sense.LemmaColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(lemma.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := su.mutation.LemmaIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   sense.LemmaTable,
			Columns: []string{sense.LemmaColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(lemma.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, su.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{sense.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	su.mutation.done = true
	return n, nil
}

// SenseUpdateOne is the builder for updating a single Sense entity.
type SenseUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *SenseMutation
}

// SetSynsetID sets the "synset" edge to the Synset entity by ID.
func (suo *SenseUpdateOne) SetSynsetID(id string) *SenseUpdateOne {
	suo.mutation.SetSynsetID(id)
	return suo
}

// SetNillableSynsetID sets the "synset" edge to the Synset entity by ID if the given value is not nil.
func (suo *SenseUpdateOne) SetNillableSynsetID(id *string) *SenseUpdateOne {
	if id != nil {
		suo = suo.SetSynsetID(*id)
	}
	return suo
}

// SetSynset sets the "synset" edge to the Synset entity.
func (suo *SenseUpdateOne) SetSynset(s *Synset) *SenseUpdateOne {
	return suo.SetSynsetID(s.ID)
}

// SetLemmaID sets the "lemma" edge to the Lemma entity by ID.
func (suo *SenseUpdateOne) SetLemmaID(id string) *SenseUpdateOne {
	suo.mutation.SetLemmaID(id)
	return suo
}

// SetNillableLemmaID sets the "lemma" edge to the Lemma entity by ID if the given value is not nil.
func (suo *SenseUpdateOne) SetNillableLemmaID(id *string) *SenseUpdateOne {
	if id != nil {
		suo = suo.SetLemmaID(*id)
	}
	return suo
}

// SetLemma sets the "lemma" edge to the Lemma entity.
func (suo *SenseUpdateOne) SetLemma(l *Lemma) *SenseUpdateOne {
	return suo.SetLemmaID(l.ID)
}

// Mutation returns the SenseMutation object of the builder.
func (suo *SenseUpdateOne) Mutation() *SenseMutation {
	return suo.mutation
}

// ClearSynset clears the "synset" edge to the Synset entity.
func (suo *SenseUpdateOne) ClearSynset() *SenseUpdateOne {
	suo.mutation.ClearSynset()
	return suo
}

// ClearLemma clears the "lemma" edge to the Lemma entity.
func (suo *SenseUpdateOne) ClearLemma() *SenseUpdateOne {
	suo.mutation.ClearLemma()
	return suo
}

// Where appends a list predicates to the SenseUpdate builder.
func (suo *SenseUpdateOne) Where(ps ...predicate.Sense) *SenseUpdateOne {
	suo.mutation.Where(ps...)
	return suo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (suo *SenseUpdateOne) Select(field string, fields ...string) *SenseUpdateOne {
	suo.fields = append([]string{field}, fields...)
	return suo
}

// Save executes the query and returns the updated Sense entity.
func (suo *SenseUpdateOne) Save(ctx context.Context) (*Sense, error) {
	return withHooks(ctx, suo.sqlSave, suo.mutation, suo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (suo *SenseUpdateOne) SaveX(ctx context.Context) *Sense {
	node, err := suo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (suo *SenseUpdateOne) Exec(ctx context.Context) error {
	_, err := suo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (suo *SenseUpdateOne) ExecX(ctx context.Context) {
	if err := suo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (suo *SenseUpdateOne) sqlSave(ctx context.Context) (_node *Sense, err error) {
	_spec := sqlgraph.NewUpdateSpec(sense.Table, sense.Columns, sqlgraph.NewFieldSpec(sense.FieldID, field.TypeString))
	id, ok := suo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Sense.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := suo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, sense.FieldID)
		for _, f := range fields {
			if !sense.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != sense.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := suo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if suo.mutation.SynsetCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   sense.SynsetTable,
			Columns: []string{sense.SynsetColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(synset.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := suo.mutation.SynsetIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   sense.SynsetTable,
			Columns: []string{sense.SynsetColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(synset.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if suo.mutation.LemmaCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   sense.LemmaTable,
			Columns: []string{sense.LemmaColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(lemma.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := suo.mutation.LemmaIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   sense.LemmaTable,
			Columns: []string{sense.LemmaColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(lemma.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Sense{config: suo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, suo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{sense.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	suo.mutation.done = true
	return _node, nil
}
