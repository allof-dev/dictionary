// Code generated by ent, DO NOT EDIT.

package sense

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the sense type in the database.
	Label = "sense"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// EdgeSynset holds the string denoting the synset edge name in mutations.
	EdgeSynset = "synset"
	// EdgeLemma holds the string denoting the lemma edge name in mutations.
	EdgeLemma = "lemma"
	// Table holds the table name of the sense in the database.
	Table = "senses"
	// SynsetTable is the table that holds the synset relation/edge.
	SynsetTable = "senses"
	// SynsetInverseTable is the table name for the Synset entity.
	// It exists in this package in order to avoid circular dependency with the "synset" package.
	SynsetInverseTable = "synsets"
	// SynsetColumn is the table column denoting the synset relation/edge.
	SynsetColumn = "sense_synset"
	// LemmaTable is the table that holds the lemma relation/edge.
	LemmaTable = "senses"
	// LemmaInverseTable is the table name for the Lemma entity.
	// It exists in this package in order to avoid circular dependency with the "lemma" package.
	LemmaInverseTable = "lemmas"
	// LemmaColumn is the table column denoting the lemma relation/edge.
	LemmaColumn = "sense_lemma"
)

// Columns holds all SQL columns for sense fields.
var Columns = []string{
	FieldID,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "senses"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"sense_synset",
	"sense_lemma",
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

var (
	// IDValidator is a validator for the "id" field. It is called by the builders before save.
	IDValidator func(string) error
)

// OrderOption defines the ordering options for the Sense queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// BySynsetField orders the results by synset field.
func BySynsetField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newSynsetStep(), sql.OrderByField(field, opts...))
	}
}

// ByLemmaField orders the results by lemma field.
func ByLemmaField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newLemmaStep(), sql.OrderByField(field, opts...))
	}
}
func newSynsetStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(SynsetInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, false, SynsetTable, SynsetColumn),
	)
}
func newLemmaStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(LemmaInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, false, LemmaTable, LemmaColumn),
	)
}
