// Code generated by ent, DO NOT EDIT.

package lemma

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the lemma type in the database.
	Label = "lemma"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldWrittenForm holds the string denoting the writtenform field in the database.
	FieldWrittenForm = "written_form"
	// FieldPartOfSpeech holds the string denoting the partofspeech field in the database.
	FieldPartOfSpeech = "part_of_speech"
	// EdgeSenses holds the string denoting the senses edge name in mutations.
	EdgeSenses = "senses"
	// Table holds the table name of the lemma in the database.
	Table = "lemmas"
	// SensesTable is the table that holds the senses relation/edge.
	SensesTable = "senses"
	// SensesInverseTable is the table name for the Sense entity.
	// It exists in this package in order to avoid circular dependency with the "sense" package.
	SensesInverseTable = "senses"
	// SensesColumn is the table column denoting the senses relation/edge.
	SensesColumn = "sense_lemma"
)

// Columns holds all SQL columns for lemma fields.
var Columns = []string{
	FieldID,
	FieldWrittenForm,
	FieldPartOfSpeech,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// WrittenFormValidator is a validator for the "writtenForm" field. It is called by the builders before save.
	WrittenFormValidator func(string) error
	// PartOfSpeechValidator is a validator for the "partOfSpeech" field. It is called by the builders before save.
	PartOfSpeechValidator func(string) error
	// IDValidator is a validator for the "id" field. It is called by the builders before save.
	IDValidator func(string) error
)

// OrderOption defines the ordering options for the Lemma queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByWrittenForm orders the results by the writtenForm field.
func ByWrittenForm(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldWrittenForm, opts...).ToFunc()
}

// ByPartOfSpeech orders the results by the partOfSpeech field.
func ByPartOfSpeech(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldPartOfSpeech, opts...).ToFunc()
}

// BySensesCount orders the results by senses count.
func BySensesCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newSensesStep(), opts...)
	}
}

// BySenses orders the results by senses terms.
func BySenses(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newSensesStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}
func newSensesStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(SensesInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, true, SensesTable, SensesColumn),
	)
}
