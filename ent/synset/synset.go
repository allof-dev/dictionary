// Code generated by ent, DO NOT EDIT.

package synset

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the synset type in the database.
	Label = "synset"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldPartOfSpeech holds the string denoting the partofspeech field in the database.
	FieldPartOfSpeech = "part_of_speech"
	// EdgeDefinitions holds the string denoting the definitions edge name in mutations.
	EdgeDefinitions = "definitions"
	// EdgeSense holds the string denoting the sense edge name in mutations.
	EdgeSense = "sense"
	// EdgeRelFrom holds the string denoting the relfrom edge name in mutations.
	EdgeRelFrom = "relFrom"
	// EdgeRelTo holds the string denoting the relto edge name in mutations.
	EdgeRelTo = "relTo"
	// Table holds the table name of the synset in the database.
	Table = "synsets"
	// DefinitionsTable is the table that holds the definitions relation/edge.
	DefinitionsTable = "definitions"
	// DefinitionsInverseTable is the table name for the Definition entity.
	// It exists in this package in order to avoid circular dependency with the "definition" package.
	DefinitionsInverseTable = "definitions"
	// DefinitionsColumn is the table column denoting the definitions relation/edge.
	DefinitionsColumn = "synset_definitions"
	// SenseTable is the table that holds the sense relation/edge.
	SenseTable = "senses"
	// SenseInverseTable is the table name for the Sense entity.
	// It exists in this package in order to avoid circular dependency with the "sense" package.
	SenseInverseTable = "senses"
	// SenseColumn is the table column denoting the sense relation/edge.
	SenseColumn = "sense_synset"
	// RelFromTable is the table that holds the relFrom relation/edge.
	RelFromTable = "synset_relations"
	// RelFromInverseTable is the table name for the SynsetRelation entity.
	// It exists in this package in order to avoid circular dependency with the "synsetrelation" package.
	RelFromInverseTable = "synset_relations"
	// RelFromColumn is the table column denoting the relFrom relation/edge.
	RelFromColumn = "synset_relation_to"
	// RelToTable is the table that holds the relTo relation/edge.
	RelToTable = "synset_relations"
	// RelToInverseTable is the table name for the SynsetRelation entity.
	// It exists in this package in order to avoid circular dependency with the "synsetrelation" package.
	RelToInverseTable = "synset_relations"
	// RelToColumn is the table column denoting the relTo relation/edge.
	RelToColumn = "synset_relation_from"
)

// Columns holds all SQL columns for synset fields.
var Columns = []string{
	FieldID,
	FieldPartOfSpeech,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// PartOfSpeechValidator is a validator for the "partOfSpeech" field. It is called by the builders before save.
	PartOfSpeechValidator func(string) error
	// IDValidator is a validator for the "id" field. It is called by the builders before save.
	IDValidator func(string) error
)

// OrderOption defines the ordering options for the Synset queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByPartOfSpeech orders the results by the partOfSpeech field.
func ByPartOfSpeech(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldPartOfSpeech, opts...).ToFunc()
}

// ByDefinitionsCount orders the results by definitions count.
func ByDefinitionsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newDefinitionsStep(), opts...)
	}
}

// ByDefinitions orders the results by definitions terms.
func ByDefinitions(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newDefinitionsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// BySenseCount orders the results by sense count.
func BySenseCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newSenseStep(), opts...)
	}
}

// BySense orders the results by sense terms.
func BySense(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newSenseStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByRelFromCount orders the results by relFrom count.
func ByRelFromCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newRelFromStep(), opts...)
	}
}

// ByRelFrom orders the results by relFrom terms.
func ByRelFrom(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newRelFromStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByRelToCount orders the results by relTo count.
func ByRelToCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newRelToStep(), opts...)
	}
}

// ByRelTo orders the results by relTo terms.
func ByRelTo(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newRelToStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}
func newDefinitionsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(DefinitionsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, DefinitionsTable, DefinitionsColumn),
	)
}
func newSenseStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(SenseInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, true, SenseTable, SenseColumn),
	)
}
func newRelFromStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(RelFromInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, true, RelFromTable, RelFromColumn),
	)
}
func newRelToStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(RelToInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, true, RelToTable, RelToColumn),
	)
}
