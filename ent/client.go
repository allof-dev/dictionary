// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"log"
	"reflect"

	"github.com/allof-dev/dictionary/ent/migrate"

	"entgo.io/ent"
	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/allof-dev/dictionary/ent/definition"
	"github.com/allof-dev/dictionary/ent/lemma"
	"github.com/allof-dev/dictionary/ent/sense"
	"github.com/allof-dev/dictionary/ent/synset"
)

// Client is the client that holds all ent builders.
type Client struct {
	config
	// Schema is the client for creating, migrating and dropping schema.
	Schema *migrate.Schema
	// Definition is the client for interacting with the Definition builders.
	Definition *DefinitionClient
	// Lemma is the client for interacting with the Lemma builders.
	Lemma *LemmaClient
	// Sense is the client for interacting with the Sense builders.
	Sense *SenseClient
	// Synset is the client for interacting with the Synset builders.
	Synset *SynsetClient
}

// NewClient creates a new client configured with the given options.
func NewClient(opts ...Option) *Client {
	client := &Client{config: newConfig(opts...)}
	client.init()
	return client
}

func (c *Client) init() {
	c.Schema = migrate.NewSchema(c.driver)
	c.Definition = NewDefinitionClient(c.config)
	c.Lemma = NewLemmaClient(c.config)
	c.Sense = NewSenseClient(c.config)
	c.Synset = NewSynsetClient(c.config)
}

type (
	// config is the configuration for the client and its builder.
	config struct {
		// driver used for executing database requests.
		driver dialect.Driver
		// debug enable a debug logging.
		debug bool
		// log used for logging on debug mode.
		log func(...any)
		// hooks to execute on mutations.
		hooks *hooks
		// interceptors to execute on queries.
		inters *inters
	}
	// Option function to configure the client.
	Option func(*config)
)

// newConfig creates a new config for the client.
func newConfig(opts ...Option) config {
	cfg := config{log: log.Println, hooks: &hooks{}, inters: &inters{}}
	cfg.options(opts...)
	return cfg
}

// options applies the options on the config object.
func (c *config) options(opts ...Option) {
	for _, opt := range opts {
		opt(c)
	}
	if c.debug {
		c.driver = dialect.Debug(c.driver, c.log)
	}
}

// Debug enables debug logging on the ent.Driver.
func Debug() Option {
	return func(c *config) {
		c.debug = true
	}
}

// Log sets the logging function for debug mode.
func Log(fn func(...any)) Option {
	return func(c *config) {
		c.log = fn
	}
}

// Driver configures the client driver.
func Driver(driver dialect.Driver) Option {
	return func(c *config) {
		c.driver = driver
	}
}

// Open opens a database/sql.DB specified by the driver name and
// the data source name, and returns a new client attached to it.
// Optional parameters can be added for configuring the client.
func Open(driverName, dataSourceName string, options ...Option) (*Client, error) {
	switch driverName {
	case dialect.MySQL, dialect.Postgres, dialect.SQLite:
		drv, err := sql.Open(driverName, dataSourceName)
		if err != nil {
			return nil, err
		}
		return NewClient(append(options, Driver(drv))...), nil
	default:
		return nil, fmt.Errorf("unsupported driver: %q", driverName)
	}
}

// ErrTxStarted is returned when trying to start a new transaction from a transactional client.
var ErrTxStarted = errors.New("ent: cannot start a transaction within a transaction")

// Tx returns a new transactional client. The provided context
// is used until the transaction is committed or rolled back.
func (c *Client) Tx(ctx context.Context) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, ErrTxStarted
	}
	tx, err := newTx(ctx, c.driver)
	if err != nil {
		return nil, fmt.Errorf("ent: starting a transaction: %w", err)
	}
	cfg := c.config
	cfg.driver = tx
	return &Tx{
		ctx:        ctx,
		config:     cfg,
		Definition: NewDefinitionClient(cfg),
		Lemma:      NewLemmaClient(cfg),
		Sense:      NewSenseClient(cfg),
		Synset:     NewSynsetClient(cfg),
	}, nil
}

// BeginTx returns a transactional client with specified options.
func (c *Client) BeginTx(ctx context.Context, opts *sql.TxOptions) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, errors.New("ent: cannot start a transaction within a transaction")
	}
	tx, err := c.driver.(interface {
		BeginTx(context.Context, *sql.TxOptions) (dialect.Tx, error)
	}).BeginTx(ctx, opts)
	if err != nil {
		return nil, fmt.Errorf("ent: starting a transaction: %w", err)
	}
	cfg := c.config
	cfg.driver = &txDriver{tx: tx, drv: c.driver}
	return &Tx{
		ctx:        ctx,
		config:     cfg,
		Definition: NewDefinitionClient(cfg),
		Lemma:      NewLemmaClient(cfg),
		Sense:      NewSenseClient(cfg),
		Synset:     NewSynsetClient(cfg),
	}, nil
}

// Debug returns a new debug-client. It's used to get verbose logging on specific operations.
//
//	client.Debug().
//		Definition.
//		Query().
//		Count(ctx)
func (c *Client) Debug() *Client {
	if c.debug {
		return c
	}
	cfg := c.config
	cfg.driver = dialect.Debug(c.driver, c.log)
	client := &Client{config: cfg}
	client.init()
	return client
}

// Close closes the database connection and prevents new queries from starting.
func (c *Client) Close() error {
	return c.driver.Close()
}

// Use adds the mutation hooks to all the entity clients.
// In order to add hooks to a specific client, call: `client.Node.Use(...)`.
func (c *Client) Use(hooks ...Hook) {
	c.Definition.Use(hooks...)
	c.Lemma.Use(hooks...)
	c.Sense.Use(hooks...)
	c.Synset.Use(hooks...)
}

// Intercept adds the query interceptors to all the entity clients.
// In order to add interceptors to a specific client, call: `client.Node.Intercept(...)`.
func (c *Client) Intercept(interceptors ...Interceptor) {
	c.Definition.Intercept(interceptors...)
	c.Lemma.Intercept(interceptors...)
	c.Sense.Intercept(interceptors...)
	c.Synset.Intercept(interceptors...)
}

// Mutate implements the ent.Mutator interface.
func (c *Client) Mutate(ctx context.Context, m Mutation) (Value, error) {
	switch m := m.(type) {
	case *DefinitionMutation:
		return c.Definition.mutate(ctx, m)
	case *LemmaMutation:
		return c.Lemma.mutate(ctx, m)
	case *SenseMutation:
		return c.Sense.mutate(ctx, m)
	case *SynsetMutation:
		return c.Synset.mutate(ctx, m)
	default:
		return nil, fmt.Errorf("ent: unknown mutation type %T", m)
	}
}

// DefinitionClient is a client for the Definition schema.
type DefinitionClient struct {
	config
}

// NewDefinitionClient returns a client for the Definition from the given config.
func NewDefinitionClient(c config) *DefinitionClient {
	return &DefinitionClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `definition.Hooks(f(g(h())))`.
func (c *DefinitionClient) Use(hooks ...Hook) {
	c.hooks.Definition = append(c.hooks.Definition, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `definition.Intercept(f(g(h())))`.
func (c *DefinitionClient) Intercept(interceptors ...Interceptor) {
	c.inters.Definition = append(c.inters.Definition, interceptors...)
}

// Create returns a builder for creating a Definition entity.
func (c *DefinitionClient) Create() *DefinitionCreate {
	mutation := newDefinitionMutation(c.config, OpCreate)
	return &DefinitionCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Definition entities.
func (c *DefinitionClient) CreateBulk(builders ...*DefinitionCreate) *DefinitionCreateBulk {
	return &DefinitionCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *DefinitionClient) MapCreateBulk(slice any, setFunc func(*DefinitionCreate, int)) *DefinitionCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &DefinitionCreateBulk{err: fmt.Errorf("calling to DefinitionClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*DefinitionCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &DefinitionCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Definition.
func (c *DefinitionClient) Update() *DefinitionUpdate {
	mutation := newDefinitionMutation(c.config, OpUpdate)
	return &DefinitionUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *DefinitionClient) UpdateOne(d *Definition) *DefinitionUpdateOne {
	mutation := newDefinitionMutation(c.config, OpUpdateOne, withDefinition(d))
	return &DefinitionUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *DefinitionClient) UpdateOneID(id int) *DefinitionUpdateOne {
	mutation := newDefinitionMutation(c.config, OpUpdateOne, withDefinitionID(id))
	return &DefinitionUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Definition.
func (c *DefinitionClient) Delete() *DefinitionDelete {
	mutation := newDefinitionMutation(c.config, OpDelete)
	return &DefinitionDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *DefinitionClient) DeleteOne(d *Definition) *DefinitionDeleteOne {
	return c.DeleteOneID(d.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *DefinitionClient) DeleteOneID(id int) *DefinitionDeleteOne {
	builder := c.Delete().Where(definition.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &DefinitionDeleteOne{builder}
}

// Query returns a query builder for Definition.
func (c *DefinitionClient) Query() *DefinitionQuery {
	return &DefinitionQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeDefinition},
		inters: c.Interceptors(),
	}
}

// Get returns a Definition entity by its id.
func (c *DefinitionClient) Get(ctx context.Context, id int) (*Definition, error) {
	return c.Query().Where(definition.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *DefinitionClient) GetX(ctx context.Context, id int) *Definition {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *DefinitionClient) Hooks() []Hook {
	return c.hooks.Definition
}

// Interceptors returns the client interceptors.
func (c *DefinitionClient) Interceptors() []Interceptor {
	return c.inters.Definition
}

func (c *DefinitionClient) mutate(ctx context.Context, m *DefinitionMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&DefinitionCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&DefinitionUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&DefinitionUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&DefinitionDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown Definition mutation op: %q", m.Op())
	}
}

// LemmaClient is a client for the Lemma schema.
type LemmaClient struct {
	config
}

// NewLemmaClient returns a client for the Lemma from the given config.
func NewLemmaClient(c config) *LemmaClient {
	return &LemmaClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `lemma.Hooks(f(g(h())))`.
func (c *LemmaClient) Use(hooks ...Hook) {
	c.hooks.Lemma = append(c.hooks.Lemma, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `lemma.Intercept(f(g(h())))`.
func (c *LemmaClient) Intercept(interceptors ...Interceptor) {
	c.inters.Lemma = append(c.inters.Lemma, interceptors...)
}

// Create returns a builder for creating a Lemma entity.
func (c *LemmaClient) Create() *LemmaCreate {
	mutation := newLemmaMutation(c.config, OpCreate)
	return &LemmaCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Lemma entities.
func (c *LemmaClient) CreateBulk(builders ...*LemmaCreate) *LemmaCreateBulk {
	return &LemmaCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *LemmaClient) MapCreateBulk(slice any, setFunc func(*LemmaCreate, int)) *LemmaCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &LemmaCreateBulk{err: fmt.Errorf("calling to LemmaClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*LemmaCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &LemmaCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Lemma.
func (c *LemmaClient) Update() *LemmaUpdate {
	mutation := newLemmaMutation(c.config, OpUpdate)
	return &LemmaUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *LemmaClient) UpdateOne(l *Lemma) *LemmaUpdateOne {
	mutation := newLemmaMutation(c.config, OpUpdateOne, withLemma(l))
	return &LemmaUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *LemmaClient) UpdateOneID(id string) *LemmaUpdateOne {
	mutation := newLemmaMutation(c.config, OpUpdateOne, withLemmaID(id))
	return &LemmaUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Lemma.
func (c *LemmaClient) Delete() *LemmaDelete {
	mutation := newLemmaMutation(c.config, OpDelete)
	return &LemmaDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *LemmaClient) DeleteOne(l *Lemma) *LemmaDeleteOne {
	return c.DeleteOneID(l.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *LemmaClient) DeleteOneID(id string) *LemmaDeleteOne {
	builder := c.Delete().Where(lemma.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &LemmaDeleteOne{builder}
}

// Query returns a query builder for Lemma.
func (c *LemmaClient) Query() *LemmaQuery {
	return &LemmaQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeLemma},
		inters: c.Interceptors(),
	}
}

// Get returns a Lemma entity by its id.
func (c *LemmaClient) Get(ctx context.Context, id string) (*Lemma, error) {
	return c.Query().Where(lemma.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *LemmaClient) GetX(ctx context.Context, id string) *Lemma {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QuerySenses queries the senses edge of a Lemma.
func (c *LemmaClient) QuerySenses(l *Lemma) *SenseQuery {
	query := (&SenseClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := l.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(lemma.Table, lemma.FieldID, id),
			sqlgraph.To(sense.Table, sense.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, true, lemma.SensesTable, lemma.SensesColumn),
		)
		fromV = sqlgraph.Neighbors(l.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *LemmaClient) Hooks() []Hook {
	return c.hooks.Lemma
}

// Interceptors returns the client interceptors.
func (c *LemmaClient) Interceptors() []Interceptor {
	return c.inters.Lemma
}

func (c *LemmaClient) mutate(ctx context.Context, m *LemmaMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&LemmaCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&LemmaUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&LemmaUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&LemmaDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown Lemma mutation op: %q", m.Op())
	}
}

// SenseClient is a client for the Sense schema.
type SenseClient struct {
	config
}

// NewSenseClient returns a client for the Sense from the given config.
func NewSenseClient(c config) *SenseClient {
	return &SenseClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `sense.Hooks(f(g(h())))`.
func (c *SenseClient) Use(hooks ...Hook) {
	c.hooks.Sense = append(c.hooks.Sense, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `sense.Intercept(f(g(h())))`.
func (c *SenseClient) Intercept(interceptors ...Interceptor) {
	c.inters.Sense = append(c.inters.Sense, interceptors...)
}

// Create returns a builder for creating a Sense entity.
func (c *SenseClient) Create() *SenseCreate {
	mutation := newSenseMutation(c.config, OpCreate)
	return &SenseCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Sense entities.
func (c *SenseClient) CreateBulk(builders ...*SenseCreate) *SenseCreateBulk {
	return &SenseCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *SenseClient) MapCreateBulk(slice any, setFunc func(*SenseCreate, int)) *SenseCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &SenseCreateBulk{err: fmt.Errorf("calling to SenseClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*SenseCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &SenseCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Sense.
func (c *SenseClient) Update() *SenseUpdate {
	mutation := newSenseMutation(c.config, OpUpdate)
	return &SenseUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *SenseClient) UpdateOne(s *Sense) *SenseUpdateOne {
	mutation := newSenseMutation(c.config, OpUpdateOne, withSense(s))
	return &SenseUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *SenseClient) UpdateOneID(id string) *SenseUpdateOne {
	mutation := newSenseMutation(c.config, OpUpdateOne, withSenseID(id))
	return &SenseUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Sense.
func (c *SenseClient) Delete() *SenseDelete {
	mutation := newSenseMutation(c.config, OpDelete)
	return &SenseDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *SenseClient) DeleteOne(s *Sense) *SenseDeleteOne {
	return c.DeleteOneID(s.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *SenseClient) DeleteOneID(id string) *SenseDeleteOne {
	builder := c.Delete().Where(sense.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &SenseDeleteOne{builder}
}

// Query returns a query builder for Sense.
func (c *SenseClient) Query() *SenseQuery {
	return &SenseQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeSense},
		inters: c.Interceptors(),
	}
}

// Get returns a Sense entity by its id.
func (c *SenseClient) Get(ctx context.Context, id string) (*Sense, error) {
	return c.Query().Where(sense.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *SenseClient) GetX(ctx context.Context, id string) *Sense {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QuerySynset queries the synset edge of a Sense.
func (c *SenseClient) QuerySynset(s *Sense) *SynsetQuery {
	query := (&SynsetClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := s.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(sense.Table, sense.FieldID, id),
			sqlgraph.To(synset.Table, synset.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, sense.SynsetTable, sense.SynsetColumn),
		)
		fromV = sqlgraph.Neighbors(s.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryLemma queries the lemma edge of a Sense.
func (c *SenseClient) QueryLemma(s *Sense) *LemmaQuery {
	query := (&LemmaClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := s.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(sense.Table, sense.FieldID, id),
			sqlgraph.To(lemma.Table, lemma.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, sense.LemmaTable, sense.LemmaColumn),
		)
		fromV = sqlgraph.Neighbors(s.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *SenseClient) Hooks() []Hook {
	return c.hooks.Sense
}

// Interceptors returns the client interceptors.
func (c *SenseClient) Interceptors() []Interceptor {
	return c.inters.Sense
}

func (c *SenseClient) mutate(ctx context.Context, m *SenseMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&SenseCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&SenseUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&SenseUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&SenseDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown Sense mutation op: %q", m.Op())
	}
}

// SynsetClient is a client for the Synset schema.
type SynsetClient struct {
	config
}

// NewSynsetClient returns a client for the Synset from the given config.
func NewSynsetClient(c config) *SynsetClient {
	return &SynsetClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `synset.Hooks(f(g(h())))`.
func (c *SynsetClient) Use(hooks ...Hook) {
	c.hooks.Synset = append(c.hooks.Synset, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `synset.Intercept(f(g(h())))`.
func (c *SynsetClient) Intercept(interceptors ...Interceptor) {
	c.inters.Synset = append(c.inters.Synset, interceptors...)
}

// Create returns a builder for creating a Synset entity.
func (c *SynsetClient) Create() *SynsetCreate {
	mutation := newSynsetMutation(c.config, OpCreate)
	return &SynsetCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Synset entities.
func (c *SynsetClient) CreateBulk(builders ...*SynsetCreate) *SynsetCreateBulk {
	return &SynsetCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *SynsetClient) MapCreateBulk(slice any, setFunc func(*SynsetCreate, int)) *SynsetCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &SynsetCreateBulk{err: fmt.Errorf("calling to SynsetClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*SynsetCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &SynsetCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Synset.
func (c *SynsetClient) Update() *SynsetUpdate {
	mutation := newSynsetMutation(c.config, OpUpdate)
	return &SynsetUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *SynsetClient) UpdateOne(s *Synset) *SynsetUpdateOne {
	mutation := newSynsetMutation(c.config, OpUpdateOne, withSynset(s))
	return &SynsetUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *SynsetClient) UpdateOneID(id string) *SynsetUpdateOne {
	mutation := newSynsetMutation(c.config, OpUpdateOne, withSynsetID(id))
	return &SynsetUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Synset.
func (c *SynsetClient) Delete() *SynsetDelete {
	mutation := newSynsetMutation(c.config, OpDelete)
	return &SynsetDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *SynsetClient) DeleteOne(s *Synset) *SynsetDeleteOne {
	return c.DeleteOneID(s.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *SynsetClient) DeleteOneID(id string) *SynsetDeleteOne {
	builder := c.Delete().Where(synset.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &SynsetDeleteOne{builder}
}

// Query returns a query builder for Synset.
func (c *SynsetClient) Query() *SynsetQuery {
	return &SynsetQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeSynset},
		inters: c.Interceptors(),
	}
}

// Get returns a Synset entity by its id.
func (c *SynsetClient) Get(ctx context.Context, id string) (*Synset, error) {
	return c.Query().Where(synset.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *SynsetClient) GetX(ctx context.Context, id string) *Synset {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryDefinitions queries the definitions edge of a Synset.
func (c *SynsetClient) QueryDefinitions(s *Synset) *DefinitionQuery {
	query := (&DefinitionClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := s.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(synset.Table, synset.FieldID, id),
			sqlgraph.To(definition.Table, definition.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, synset.DefinitionsTable, synset.DefinitionsColumn),
		)
		fromV = sqlgraph.Neighbors(s.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *SynsetClient) Hooks() []Hook {
	return c.hooks.Synset
}

// Interceptors returns the client interceptors.
func (c *SynsetClient) Interceptors() []Interceptor {
	return c.inters.Synset
}

func (c *SynsetClient) mutate(ctx context.Context, m *SynsetMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&SynsetCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&SynsetUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&SynsetUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&SynsetDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown Synset mutation op: %q", m.Op())
	}
}

// hooks and interceptors per client, for fast access.
type (
	hooks struct {
		Definition, Lemma, Sense, Synset []ent.Hook
	}
	inters struct {
		Definition, Lemma, Sense, Synset []ent.Interceptor
	}
)
