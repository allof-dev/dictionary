// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/allof-dev/dictionary/ent/lemma"
	"github.com/allof-dev/dictionary/ent/sense"
	"github.com/allof-dev/dictionary/ent/synset"
)

// SenseCreate is the builder for creating a Sense entity.
type SenseCreate struct {
	config
	mutation *SenseMutation
	hooks    []Hook
}

// SetID sets the "id" field.
func (sc *SenseCreate) SetID(s string) *SenseCreate {
	sc.mutation.SetID(s)
	return sc
}

// SetSynsetID sets the "synset" edge to the Synset entity by ID.
func (sc *SenseCreate) SetSynsetID(id string) *SenseCreate {
	sc.mutation.SetSynsetID(id)
	return sc
}

// SetNillableSynsetID sets the "synset" edge to the Synset entity by ID if the given value is not nil.
func (sc *SenseCreate) SetNillableSynsetID(id *string) *SenseCreate {
	if id != nil {
		sc = sc.SetSynsetID(*id)
	}
	return sc
}

// SetSynset sets the "synset" edge to the Synset entity.
func (sc *SenseCreate) SetSynset(s *Synset) *SenseCreate {
	return sc.SetSynsetID(s.ID)
}

// SetLemmaID sets the "lemma" edge to the Lemma entity by ID.
func (sc *SenseCreate) SetLemmaID(id string) *SenseCreate {
	sc.mutation.SetLemmaID(id)
	return sc
}

// SetNillableLemmaID sets the "lemma" edge to the Lemma entity by ID if the given value is not nil.
func (sc *SenseCreate) SetNillableLemmaID(id *string) *SenseCreate {
	if id != nil {
		sc = sc.SetLemmaID(*id)
	}
	return sc
}

// SetLemma sets the "lemma" edge to the Lemma entity.
func (sc *SenseCreate) SetLemma(l *Lemma) *SenseCreate {
	return sc.SetLemmaID(l.ID)
}

// Mutation returns the SenseMutation object of the builder.
func (sc *SenseCreate) Mutation() *SenseMutation {
	return sc.mutation
}

// Save creates the Sense in the database.
func (sc *SenseCreate) Save(ctx context.Context) (*Sense, error) {
	return withHooks(ctx, sc.sqlSave, sc.mutation, sc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (sc *SenseCreate) SaveX(ctx context.Context) *Sense {
	v, err := sc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (sc *SenseCreate) Exec(ctx context.Context) error {
	_, err := sc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (sc *SenseCreate) ExecX(ctx context.Context) {
	if err := sc.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (sc *SenseCreate) check() error {
	if v, ok := sc.mutation.ID(); ok {
		if err := sense.IDValidator(v); err != nil {
			return &ValidationError{Name: "id", err: fmt.Errorf(`ent: validator failed for field "Sense.id": %w`, err)}
		}
	}
	return nil
}

func (sc *SenseCreate) sqlSave(ctx context.Context) (*Sense, error) {
	if err := sc.check(); err != nil {
		return nil, err
	}
	_node, _spec := sc.createSpec()
	if err := sqlgraph.CreateNode(ctx, sc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(string); ok {
			_node.ID = id
		} else {
			return nil, fmt.Errorf("unexpected Sense.ID type: %T", _spec.ID.Value)
		}
	}
	sc.mutation.id = &_node.ID
	sc.mutation.done = true
	return _node, nil
}

func (sc *SenseCreate) createSpec() (*Sense, *sqlgraph.CreateSpec) {
	var (
		_node = &Sense{config: sc.config}
		_spec = sqlgraph.NewCreateSpec(sense.Table, sqlgraph.NewFieldSpec(sense.FieldID, field.TypeString))
	)
	if id, ok := sc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if nodes := sc.mutation.SynsetIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   sense.SynsetTable,
			Columns: []string{sense.SynsetColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(synset.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.sense_synset = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := sc.mutation.LemmaIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   sense.LemmaTable,
			Columns: []string{sense.LemmaColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(lemma.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.sense_lemma = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// SenseCreateBulk is the builder for creating many Sense entities in bulk.
type SenseCreateBulk struct {
	config
	err      error
	builders []*SenseCreate
}

// Save creates the Sense entities in the database.
func (scb *SenseCreateBulk) Save(ctx context.Context) ([]*Sense, error) {
	if scb.err != nil {
		return nil, scb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(scb.builders))
	nodes := make([]*Sense, len(scb.builders))
	mutators := make([]Mutator, len(scb.builders))
	for i := range scb.builders {
		func(i int, root context.Context) {
			builder := scb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*SenseMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, scb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, scb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, scb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (scb *SenseCreateBulk) SaveX(ctx context.Context) []*Sense {
	v, err := scb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (scb *SenseCreateBulk) Exec(ctx context.Context) error {
	_, err := scb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (scb *SenseCreateBulk) ExecX(ctx context.Context) {
	if err := scb.Exec(ctx); err != nil {
		panic(err)
	}
}
