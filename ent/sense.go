// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/allof-dev/dictionary/ent/lemma"
	"github.com/allof-dev/dictionary/ent/sense"
	"github.com/allof-dev/dictionary/ent/synset"
)

// Sense is the model entity for the Sense schema.
type Sense struct {
	config
	// ID of the ent.
	ID string `json:"id,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the SenseQuery when eager-loading is set.
	Edges        SenseEdges `json:"edges"`
	sense_synset *string
	sense_lemma  *string
	selectValues sql.SelectValues
}

// SenseEdges holds the relations/edges for other nodes in the graph.
type SenseEdges struct {
	// Synset holds the value of the synset edge.
	Synset *Synset `json:"synset,omitempty"`
	// Lemma holds the value of the lemma edge.
	Lemma *Lemma `json:"lemma,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
}

// SynsetOrErr returns the Synset value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e SenseEdges) SynsetOrErr() (*Synset, error) {
	if e.Synset != nil {
		return e.Synset, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: synset.Label}
	}
	return nil, &NotLoadedError{edge: "synset"}
}

// LemmaOrErr returns the Lemma value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e SenseEdges) LemmaOrErr() (*Lemma, error) {
	if e.Lemma != nil {
		return e.Lemma, nil
	} else if e.loadedTypes[1] {
		return nil, &NotFoundError{label: lemma.Label}
	}
	return nil, &NotLoadedError{edge: "lemma"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Sense) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case sense.FieldID:
			values[i] = new(sql.NullString)
		case sense.ForeignKeys[0]: // sense_synset
			values[i] = new(sql.NullString)
		case sense.ForeignKeys[1]: // sense_lemma
			values[i] = new(sql.NullString)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Sense fields.
func (s *Sense) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case sense.FieldID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value.Valid {
				s.ID = value.String
			}
		case sense.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field sense_synset", values[i])
			} else if value.Valid {
				s.sense_synset = new(string)
				*s.sense_synset = value.String
			}
		case sense.ForeignKeys[1]:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field sense_lemma", values[i])
			} else if value.Valid {
				s.sense_lemma = new(string)
				*s.sense_lemma = value.String
			}
		default:
			s.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Sense.
// This includes values selected through modifiers, order, etc.
func (s *Sense) Value(name string) (ent.Value, error) {
	return s.selectValues.Get(name)
}

// QuerySynset queries the "synset" edge of the Sense entity.
func (s *Sense) QuerySynset() *SynsetQuery {
	return NewSenseClient(s.config).QuerySynset(s)
}

// QueryLemma queries the "lemma" edge of the Sense entity.
func (s *Sense) QueryLemma() *LemmaQuery {
	return NewSenseClient(s.config).QueryLemma(s)
}

// Update returns a builder for updating this Sense.
// Note that you need to call Sense.Unwrap() before calling this method if this Sense
// was returned from a transaction, and the transaction was committed or rolled back.
func (s *Sense) Update() *SenseUpdateOne {
	return NewSenseClient(s.config).UpdateOne(s)
}

// Unwrap unwraps the Sense entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (s *Sense) Unwrap() *Sense {
	_tx, ok := s.config.driver.(*txDriver)
	if !ok {
		panic("ent: Sense is not a transactional entity")
	}
	s.config.driver = _tx.drv
	return s
}

// String implements the fmt.Stringer.
func (s *Sense) String() string {
	var builder strings.Builder
	builder.WriteString("Sense(")
	builder.WriteString(fmt.Sprintf("id=%v", s.ID))
	builder.WriteByte(')')
	return builder.String()
}

// Senses is a parsable slice of Sense.
type Senses []*Sense
