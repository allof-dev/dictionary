// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/allof-dev/dictionary/ent/definition"
)

// Definition is the model entity for the Definition schema.
type Definition struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Text holds the value of the "text" field.
	Text               string `json:"text,omitempty"`
	synset_definitions *string
	selectValues       sql.SelectValues
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Definition) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case definition.FieldID:
			values[i] = new(sql.NullInt64)
		case definition.FieldText:
			values[i] = new(sql.NullString)
		case definition.ForeignKeys[0]: // synset_definitions
			values[i] = new(sql.NullString)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Definition fields.
func (d *Definition) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case definition.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			d.ID = int(value.Int64)
		case definition.FieldText:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field text", values[i])
			} else if value.Valid {
				d.Text = value.String
			}
		case definition.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field synset_definitions", values[i])
			} else if value.Valid {
				d.synset_definitions = new(string)
				*d.synset_definitions = value.String
			}
		default:
			d.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Definition.
// This includes values selected through modifiers, order, etc.
func (d *Definition) Value(name string) (ent.Value, error) {
	return d.selectValues.Get(name)
}

// Update returns a builder for updating this Definition.
// Note that you need to call Definition.Unwrap() before calling this method if this Definition
// was returned from a transaction, and the transaction was committed or rolled back.
func (d *Definition) Update() *DefinitionUpdateOne {
	return NewDefinitionClient(d.config).UpdateOne(d)
}

// Unwrap unwraps the Definition entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (d *Definition) Unwrap() *Definition {
	_tx, ok := d.config.driver.(*txDriver)
	if !ok {
		panic("ent: Definition is not a transactional entity")
	}
	d.config.driver = _tx.drv
	return d
}

// String implements the fmt.Stringer.
func (d *Definition) String() string {
	var builder strings.Builder
	builder.WriteString("Definition(")
	builder.WriteString(fmt.Sprintf("id=%v, ", d.ID))
	builder.WriteString("text=")
	builder.WriteString(d.Text)
	builder.WriteByte(')')
	return builder.String()
}

// Definitions is a parsable slice of Definition.
type Definitions []*Definition
