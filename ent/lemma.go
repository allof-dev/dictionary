// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/allof-dev/dictionary/ent/lemma"
)

// Lemma is the model entity for the Lemma schema.
type Lemma struct {
	config `json:"-"`
	// ID of the ent.
	ID string `json:"id,omitempty"`
	// WrittenForm holds the value of the "writtenForm" field.
	WrittenForm string `json:"writtenForm,omitempty"`
	// PartOfSpeech holds the value of the "partOfSpeech" field.
	PartOfSpeech string `json:"partOfSpeech,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the LemmaQuery when eager-loading is set.
	Edges        LemmaEdges `json:"edges"`
	selectValues sql.SelectValues
}

// LemmaEdges holds the relations/edges for other nodes in the graph.
type LemmaEdges struct {
	// Senses holds the value of the senses edge.
	Senses []*Sense `json:"senses,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// SensesOrErr returns the Senses value or an error if the edge
// was not loaded in eager-loading.
func (e LemmaEdges) SensesOrErr() ([]*Sense, error) {
	if e.loadedTypes[0] {
		return e.Senses, nil
	}
	return nil, &NotLoadedError{edge: "senses"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Lemma) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case lemma.FieldID, lemma.FieldWrittenForm, lemma.FieldPartOfSpeech:
			values[i] = new(sql.NullString)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Lemma fields.
func (l *Lemma) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case lemma.FieldID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value.Valid {
				l.ID = value.String
			}
		case lemma.FieldWrittenForm:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field writtenForm", values[i])
			} else if value.Valid {
				l.WrittenForm = value.String
			}
		case lemma.FieldPartOfSpeech:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field partOfSpeech", values[i])
			} else if value.Valid {
				l.PartOfSpeech = value.String
			}
		default:
			l.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Lemma.
// This includes values selected through modifiers, order, etc.
func (l *Lemma) Value(name string) (ent.Value, error) {
	return l.selectValues.Get(name)
}

// QuerySenses queries the "senses" edge of the Lemma entity.
func (l *Lemma) QuerySenses() *SenseQuery {
	return NewLemmaClient(l.config).QuerySenses(l)
}

// Update returns a builder for updating this Lemma.
// Note that you need to call Lemma.Unwrap() before calling this method if this Lemma
// was returned from a transaction, and the transaction was committed or rolled back.
func (l *Lemma) Update() *LemmaUpdateOne {
	return NewLemmaClient(l.config).UpdateOne(l)
}

// Unwrap unwraps the Lemma entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (l *Lemma) Unwrap() *Lemma {
	_tx, ok := l.config.driver.(*txDriver)
	if !ok {
		panic("ent: Lemma is not a transactional entity")
	}
	l.config.driver = _tx.drv
	return l
}

// String implements the fmt.Stringer.
func (l *Lemma) String() string {
	var builder strings.Builder
	builder.WriteString("Lemma(")
	builder.WriteString(fmt.Sprintf("id=%v, ", l.ID))
	builder.WriteString("writtenForm=")
	builder.WriteString(l.WrittenForm)
	builder.WriteString(", ")
	builder.WriteString("partOfSpeech=")
	builder.WriteString(l.PartOfSpeech)
	builder.WriteByte(')')
	return builder.String()
}

// Lemmas is a parsable slice of Lemma.
type Lemmas []*Lemma
