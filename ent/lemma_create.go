// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/allof-dev/dictionary/ent/lemma"
	"github.com/allof-dev/dictionary/ent/sense"
)

// LemmaCreate is the builder for creating a Lemma entity.
type LemmaCreate struct {
	config
	mutation *LemmaMutation
	hooks    []Hook
}

// SetWrittenForm sets the "writtenForm" field.
func (lc *LemmaCreate) SetWrittenForm(s string) *LemmaCreate {
	lc.mutation.SetWrittenForm(s)
	return lc
}

// SetPartOfSpeech sets the "partOfSpeech" field.
func (lc *LemmaCreate) SetPartOfSpeech(s string) *LemmaCreate {
	lc.mutation.SetPartOfSpeech(s)
	return lc
}

// SetID sets the "id" field.
func (lc *LemmaCreate) SetID(s string) *LemmaCreate {
	lc.mutation.SetID(s)
	return lc
}

// AddSenseIDs adds the "senses" edge to the Sense entity by IDs.
func (lc *LemmaCreate) AddSenseIDs(ids ...string) *LemmaCreate {
	lc.mutation.AddSenseIDs(ids...)
	return lc
}

// AddSenses adds the "senses" edges to the Sense entity.
func (lc *LemmaCreate) AddSenses(s ...*Sense) *LemmaCreate {
	ids := make([]string, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return lc.AddSenseIDs(ids...)
}

// Mutation returns the LemmaMutation object of the builder.
func (lc *LemmaCreate) Mutation() *LemmaMutation {
	return lc.mutation
}

// Save creates the Lemma in the database.
func (lc *LemmaCreate) Save(ctx context.Context) (*Lemma, error) {
	return withHooks(ctx, lc.sqlSave, lc.mutation, lc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (lc *LemmaCreate) SaveX(ctx context.Context) *Lemma {
	v, err := lc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (lc *LemmaCreate) Exec(ctx context.Context) error {
	_, err := lc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (lc *LemmaCreate) ExecX(ctx context.Context) {
	if err := lc.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (lc *LemmaCreate) check() error {
	if _, ok := lc.mutation.WrittenForm(); !ok {
		return &ValidationError{Name: "writtenForm", err: errors.New(`ent: missing required field "Lemma.writtenForm"`)}
	}
	if v, ok := lc.mutation.WrittenForm(); ok {
		if err := lemma.WrittenFormValidator(v); err != nil {
			return &ValidationError{Name: "writtenForm", err: fmt.Errorf(`ent: validator failed for field "Lemma.writtenForm": %w`, err)}
		}
	}
	if _, ok := lc.mutation.PartOfSpeech(); !ok {
		return &ValidationError{Name: "partOfSpeech", err: errors.New(`ent: missing required field "Lemma.partOfSpeech"`)}
	}
	if v, ok := lc.mutation.PartOfSpeech(); ok {
		if err := lemma.PartOfSpeechValidator(v); err != nil {
			return &ValidationError{Name: "partOfSpeech", err: fmt.Errorf(`ent: validator failed for field "Lemma.partOfSpeech": %w`, err)}
		}
	}
	if v, ok := lc.mutation.ID(); ok {
		if err := lemma.IDValidator(v); err != nil {
			return &ValidationError{Name: "id", err: fmt.Errorf(`ent: validator failed for field "Lemma.id": %w`, err)}
		}
	}
	return nil
}

func (lc *LemmaCreate) sqlSave(ctx context.Context) (*Lemma, error) {
	if err := lc.check(); err != nil {
		return nil, err
	}
	_node, _spec := lc.createSpec()
	if err := sqlgraph.CreateNode(ctx, lc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(string); ok {
			_node.ID = id
		} else {
			return nil, fmt.Errorf("unexpected Lemma.ID type: %T", _spec.ID.Value)
		}
	}
	lc.mutation.id = &_node.ID
	lc.mutation.done = true
	return _node, nil
}

func (lc *LemmaCreate) createSpec() (*Lemma, *sqlgraph.CreateSpec) {
	var (
		_node = &Lemma{config: lc.config}
		_spec = sqlgraph.NewCreateSpec(lemma.Table, sqlgraph.NewFieldSpec(lemma.FieldID, field.TypeString))
	)
	if id, ok := lc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := lc.mutation.WrittenForm(); ok {
		_spec.SetField(lemma.FieldWrittenForm, field.TypeString, value)
		_node.WrittenForm = value
	}
	if value, ok := lc.mutation.PartOfSpeech(); ok {
		_spec.SetField(lemma.FieldPartOfSpeech, field.TypeString, value)
		_node.PartOfSpeech = value
	}
	if nodes := lc.mutation.SensesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   lemma.SensesTable,
			Columns: []string{lemma.SensesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(sense.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// LemmaCreateBulk is the builder for creating many Lemma entities in bulk.
type LemmaCreateBulk struct {
	config
	err      error
	builders []*LemmaCreate
}

// Save creates the Lemma entities in the database.
func (lcb *LemmaCreateBulk) Save(ctx context.Context) ([]*Lemma, error) {
	if lcb.err != nil {
		return nil, lcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(lcb.builders))
	nodes := make([]*Lemma, len(lcb.builders))
	mutators := make([]Mutator, len(lcb.builders))
	for i := range lcb.builders {
		func(i int, root context.Context) {
			builder := lcb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*LemmaMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, lcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, lcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, lcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (lcb *LemmaCreateBulk) SaveX(ctx context.Context) []*Lemma {
	v, err := lcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (lcb *LemmaCreateBulk) Exec(ctx context.Context) error {
	_, err := lcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (lcb *LemmaCreateBulk) ExecX(ctx context.Context) {
	if err := lcb.Exec(ctx); err != nil {
		panic(err)
	}
}
