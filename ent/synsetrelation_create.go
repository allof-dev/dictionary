// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/allof-dev/dictionary/ent/synset"
	"github.com/allof-dev/dictionary/ent/synsetrelation"
)

// SynsetRelationCreate is the builder for creating a SynsetRelation entity.
type SynsetRelationCreate struct {
	config
	mutation *SynsetRelationMutation
	hooks    []Hook
}

// SetRelType sets the "relType" field.
func (src *SynsetRelationCreate) SetRelType(s string) *SynsetRelationCreate {
	src.mutation.SetRelType(s)
	return src
}

// SetFromID sets the "from" edge to the Synset entity by ID.
func (src *SynsetRelationCreate) SetFromID(id string) *SynsetRelationCreate {
	src.mutation.SetFromID(id)
	return src
}

// SetFrom sets the "from" edge to the Synset entity.
func (src *SynsetRelationCreate) SetFrom(s *Synset) *SynsetRelationCreate {
	return src.SetFromID(s.ID)
}

// SetToID sets the "to" edge to the Synset entity by ID.
func (src *SynsetRelationCreate) SetToID(id string) *SynsetRelationCreate {
	src.mutation.SetToID(id)
	return src
}

// SetTo sets the "to" edge to the Synset entity.
func (src *SynsetRelationCreate) SetTo(s *Synset) *SynsetRelationCreate {
	return src.SetToID(s.ID)
}

// Mutation returns the SynsetRelationMutation object of the builder.
func (src *SynsetRelationCreate) Mutation() *SynsetRelationMutation {
	return src.mutation
}

// Save creates the SynsetRelation in the database.
func (src *SynsetRelationCreate) Save(ctx context.Context) (*SynsetRelation, error) {
	return withHooks(ctx, src.sqlSave, src.mutation, src.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (src *SynsetRelationCreate) SaveX(ctx context.Context) *SynsetRelation {
	v, err := src.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (src *SynsetRelationCreate) Exec(ctx context.Context) error {
	_, err := src.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (src *SynsetRelationCreate) ExecX(ctx context.Context) {
	if err := src.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (src *SynsetRelationCreate) check() error {
	if _, ok := src.mutation.RelType(); !ok {
		return &ValidationError{Name: "relType", err: errors.New(`ent: missing required field "SynsetRelation.relType"`)}
	}
	if v, ok := src.mutation.RelType(); ok {
		if err := synsetrelation.RelTypeValidator(v); err != nil {
			return &ValidationError{Name: "relType", err: fmt.Errorf(`ent: validator failed for field "SynsetRelation.relType": %w`, err)}
		}
	}
	if len(src.mutation.FromIDs()) == 0 {
		return &ValidationError{Name: "from", err: errors.New(`ent: missing required edge "SynsetRelation.from"`)}
	}
	if len(src.mutation.ToIDs()) == 0 {
		return &ValidationError{Name: "to", err: errors.New(`ent: missing required edge "SynsetRelation.to"`)}
	}
	return nil
}

func (src *SynsetRelationCreate) sqlSave(ctx context.Context) (*SynsetRelation, error) {
	if err := src.check(); err != nil {
		return nil, err
	}
	_node, _spec := src.createSpec()
	if err := sqlgraph.CreateNode(ctx, src.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	src.mutation.id = &_node.ID
	src.mutation.done = true
	return _node, nil
}

func (src *SynsetRelationCreate) createSpec() (*SynsetRelation, *sqlgraph.CreateSpec) {
	var (
		_node = &SynsetRelation{config: src.config}
		_spec = sqlgraph.NewCreateSpec(synsetrelation.Table, sqlgraph.NewFieldSpec(synsetrelation.FieldID, field.TypeInt))
	)
	if value, ok := src.mutation.RelType(); ok {
		_spec.SetField(synsetrelation.FieldRelType, field.TypeString, value)
		_node.RelType = value
	}
	if nodes := src.mutation.FromIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   synsetrelation.FromTable,
			Columns: []string{synsetrelation.FromColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(synset.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.synset_relation_from = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := src.mutation.ToIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   synsetrelation.ToTable,
			Columns: []string{synsetrelation.ToColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(synset.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.synset_relation_to = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// SynsetRelationCreateBulk is the builder for creating many SynsetRelation entities in bulk.
type SynsetRelationCreateBulk struct {
	config
	err      error
	builders []*SynsetRelationCreate
}

// Save creates the SynsetRelation entities in the database.
func (srcb *SynsetRelationCreateBulk) Save(ctx context.Context) ([]*SynsetRelation, error) {
	if srcb.err != nil {
		return nil, srcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(srcb.builders))
	nodes := make([]*SynsetRelation, len(srcb.builders))
	mutators := make([]Mutator, len(srcb.builders))
	for i := range srcb.builders {
		func(i int, root context.Context) {
			builder := srcb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*SynsetRelationMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, srcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, srcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, srcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (srcb *SynsetRelationCreateBulk) SaveX(ctx context.Context) []*SynsetRelation {
	v, err := srcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (srcb *SynsetRelationCreateBulk) Exec(ctx context.Context) error {
	_, err := srcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (srcb *SynsetRelationCreateBulk) ExecX(ctx context.Context) {
	if err := srcb.Exec(ctx); err != nil {
		panic(err)
	}
}
