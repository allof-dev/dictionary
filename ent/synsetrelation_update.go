// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/allof-dev/dictionary/ent/predicate"
	"github.com/allof-dev/dictionary/ent/synset"
	"github.com/allof-dev/dictionary/ent/synsetrelation"
)

// SynsetRelationUpdate is the builder for updating SynsetRelation entities.
type SynsetRelationUpdate struct {
	config
	hooks    []Hook
	mutation *SynsetRelationMutation
}

// Where appends a list predicates to the SynsetRelationUpdate builder.
func (sru *SynsetRelationUpdate) Where(ps ...predicate.SynsetRelation) *SynsetRelationUpdate {
	sru.mutation.Where(ps...)
	return sru
}

// SetRelType sets the "relType" field.
func (sru *SynsetRelationUpdate) SetRelType(s string) *SynsetRelationUpdate {
	sru.mutation.SetRelType(s)
	return sru
}

// SetNillableRelType sets the "relType" field if the given value is not nil.
func (sru *SynsetRelationUpdate) SetNillableRelType(s *string) *SynsetRelationUpdate {
	if s != nil {
		sru.SetRelType(*s)
	}
	return sru
}

// SetFromID sets the "from" edge to the Synset entity by ID.
func (sru *SynsetRelationUpdate) SetFromID(id string) *SynsetRelationUpdate {
	sru.mutation.SetFromID(id)
	return sru
}

// SetFrom sets the "from" edge to the Synset entity.
func (sru *SynsetRelationUpdate) SetFrom(s *Synset) *SynsetRelationUpdate {
	return sru.SetFromID(s.ID)
}

// SetToID sets the "to" edge to the Synset entity by ID.
func (sru *SynsetRelationUpdate) SetToID(id string) *SynsetRelationUpdate {
	sru.mutation.SetToID(id)
	return sru
}

// SetTo sets the "to" edge to the Synset entity.
func (sru *SynsetRelationUpdate) SetTo(s *Synset) *SynsetRelationUpdate {
	return sru.SetToID(s.ID)
}

// Mutation returns the SynsetRelationMutation object of the builder.
func (sru *SynsetRelationUpdate) Mutation() *SynsetRelationMutation {
	return sru.mutation
}

// ClearFrom clears the "from" edge to the Synset entity.
func (sru *SynsetRelationUpdate) ClearFrom() *SynsetRelationUpdate {
	sru.mutation.ClearFrom()
	return sru
}

// ClearTo clears the "to" edge to the Synset entity.
func (sru *SynsetRelationUpdate) ClearTo() *SynsetRelationUpdate {
	sru.mutation.ClearTo()
	return sru
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (sru *SynsetRelationUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, sru.sqlSave, sru.mutation, sru.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (sru *SynsetRelationUpdate) SaveX(ctx context.Context) int {
	affected, err := sru.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (sru *SynsetRelationUpdate) Exec(ctx context.Context) error {
	_, err := sru.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (sru *SynsetRelationUpdate) ExecX(ctx context.Context) {
	if err := sru.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (sru *SynsetRelationUpdate) check() error {
	if v, ok := sru.mutation.RelType(); ok {
		if err := synsetrelation.RelTypeValidator(v); err != nil {
			return &ValidationError{Name: "relType", err: fmt.Errorf(`ent: validator failed for field "SynsetRelation.relType": %w`, err)}
		}
	}
	if sru.mutation.FromCleared() && len(sru.mutation.FromIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "SynsetRelation.from"`)
	}
	if sru.mutation.ToCleared() && len(sru.mutation.ToIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "SynsetRelation.to"`)
	}
	return nil
}

func (sru *SynsetRelationUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := sru.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(synsetrelation.Table, synsetrelation.Columns, sqlgraph.NewFieldSpec(synsetrelation.FieldID, field.TypeInt))
	if ps := sru.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := sru.mutation.RelType(); ok {
		_spec.SetField(synsetrelation.FieldRelType, field.TypeString, value)
	}
	if sru.mutation.FromCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   synsetrelation.FromTable,
			Columns: []string{synsetrelation.FromColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(synset.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := sru.mutation.FromIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   synsetrelation.FromTable,
			Columns: []string{synsetrelation.FromColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(synset.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if sru.mutation.ToCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   synsetrelation.ToTable,
			Columns: []string{synsetrelation.ToColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(synset.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := sru.mutation.ToIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   synsetrelation.ToTable,
			Columns: []string{synsetrelation.ToColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(synset.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, sru.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{synsetrelation.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	sru.mutation.done = true
	return n, nil
}

// SynsetRelationUpdateOne is the builder for updating a single SynsetRelation entity.
type SynsetRelationUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *SynsetRelationMutation
}

// SetRelType sets the "relType" field.
func (sruo *SynsetRelationUpdateOne) SetRelType(s string) *SynsetRelationUpdateOne {
	sruo.mutation.SetRelType(s)
	return sruo
}

// SetNillableRelType sets the "relType" field if the given value is not nil.
func (sruo *SynsetRelationUpdateOne) SetNillableRelType(s *string) *SynsetRelationUpdateOne {
	if s != nil {
		sruo.SetRelType(*s)
	}
	return sruo
}

// SetFromID sets the "from" edge to the Synset entity by ID.
func (sruo *SynsetRelationUpdateOne) SetFromID(id string) *SynsetRelationUpdateOne {
	sruo.mutation.SetFromID(id)
	return sruo
}

// SetFrom sets the "from" edge to the Synset entity.
func (sruo *SynsetRelationUpdateOne) SetFrom(s *Synset) *SynsetRelationUpdateOne {
	return sruo.SetFromID(s.ID)
}

// SetToID sets the "to" edge to the Synset entity by ID.
func (sruo *SynsetRelationUpdateOne) SetToID(id string) *SynsetRelationUpdateOne {
	sruo.mutation.SetToID(id)
	return sruo
}

// SetTo sets the "to" edge to the Synset entity.
func (sruo *SynsetRelationUpdateOne) SetTo(s *Synset) *SynsetRelationUpdateOne {
	return sruo.SetToID(s.ID)
}

// Mutation returns the SynsetRelationMutation object of the builder.
func (sruo *SynsetRelationUpdateOne) Mutation() *SynsetRelationMutation {
	return sruo.mutation
}

// ClearFrom clears the "from" edge to the Synset entity.
func (sruo *SynsetRelationUpdateOne) ClearFrom() *SynsetRelationUpdateOne {
	sruo.mutation.ClearFrom()
	return sruo
}

// ClearTo clears the "to" edge to the Synset entity.
func (sruo *SynsetRelationUpdateOne) ClearTo() *SynsetRelationUpdateOne {
	sruo.mutation.ClearTo()
	return sruo
}

// Where appends a list predicates to the SynsetRelationUpdate builder.
func (sruo *SynsetRelationUpdateOne) Where(ps ...predicate.SynsetRelation) *SynsetRelationUpdateOne {
	sruo.mutation.Where(ps...)
	return sruo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (sruo *SynsetRelationUpdateOne) Select(field string, fields ...string) *SynsetRelationUpdateOne {
	sruo.fields = append([]string{field}, fields...)
	return sruo
}

// Save executes the query and returns the updated SynsetRelation entity.
func (sruo *SynsetRelationUpdateOne) Save(ctx context.Context) (*SynsetRelation, error) {
	return withHooks(ctx, sruo.sqlSave, sruo.mutation, sruo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (sruo *SynsetRelationUpdateOne) SaveX(ctx context.Context) *SynsetRelation {
	node, err := sruo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (sruo *SynsetRelationUpdateOne) Exec(ctx context.Context) error {
	_, err := sruo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (sruo *SynsetRelationUpdateOne) ExecX(ctx context.Context) {
	if err := sruo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (sruo *SynsetRelationUpdateOne) check() error {
	if v, ok := sruo.mutation.RelType(); ok {
		if err := synsetrelation.RelTypeValidator(v); err != nil {
			return &ValidationError{Name: "relType", err: fmt.Errorf(`ent: validator failed for field "SynsetRelation.relType": %w`, err)}
		}
	}
	if sruo.mutation.FromCleared() && len(sruo.mutation.FromIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "SynsetRelation.from"`)
	}
	if sruo.mutation.ToCleared() && len(sruo.mutation.ToIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "SynsetRelation.to"`)
	}
	return nil
}

func (sruo *SynsetRelationUpdateOne) sqlSave(ctx context.Context) (_node *SynsetRelation, err error) {
	if err := sruo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(synsetrelation.Table, synsetrelation.Columns, sqlgraph.NewFieldSpec(synsetrelation.FieldID, field.TypeInt))
	id, ok := sruo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "SynsetRelation.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := sruo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, synsetrelation.FieldID)
		for _, f := range fields {
			if !synsetrelation.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != synsetrelation.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := sruo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := sruo.mutation.RelType(); ok {
		_spec.SetField(synsetrelation.FieldRelType, field.TypeString, value)
	}
	if sruo.mutation.FromCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   synsetrelation.FromTable,
			Columns: []string{synsetrelation.FromColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(synset.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := sruo.mutation.FromIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   synsetrelation.FromTable,
			Columns: []string{synsetrelation.FromColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(synset.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if sruo.mutation.ToCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   synsetrelation.ToTable,
			Columns: []string{synsetrelation.ToColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(synset.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := sruo.mutation.ToIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   synsetrelation.ToTable,
			Columns: []string{synsetrelation.ToColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(synset.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &SynsetRelation{config: sruo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, sruo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{synsetrelation.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	sruo.mutation.done = true
	return _node, nil
}
