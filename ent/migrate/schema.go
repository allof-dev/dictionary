// Code generated by ent, DO NOT EDIT.

package migrate

import (
	"entgo.io/ent/dialect/sql/schema"
	"entgo.io/ent/schema/field"
)

var (
	// DefinitionsColumns holds the columns for the "definitions" table.
	DefinitionsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
		{Name: "text", Type: field.TypeString},
		{Name: "synset_definitions", Type: field.TypeString, Nullable: true},
	}
	// DefinitionsTable holds the schema information for the "definitions" table.
	DefinitionsTable = &schema.Table{
		Name:       "definitions",
		Columns:    DefinitionsColumns,
		PrimaryKey: []*schema.Column{DefinitionsColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "definitions_synsets_definitions",
				Columns:    []*schema.Column{DefinitionsColumns[2]},
				RefColumns: []*schema.Column{SynsetsColumns[0]},
				OnDelete:   schema.SetNull,
			},
		},
		Indexes: []*schema.Index{
			{
				Name:    "definition_synset_definitions",
				Unique:  false,
				Columns: []*schema.Column{DefinitionsColumns[2]},
			},
		},
	}
	// LemmasColumns holds the columns for the "lemmas" table.
	LemmasColumns = []*schema.Column{
		{Name: "id", Type: field.TypeString},
		{Name: "written_form", Type: field.TypeString},
		{Name: "part_of_speech", Type: field.TypeString},
	}
	// LemmasTable holds the schema information for the "lemmas" table.
	LemmasTable = &schema.Table{
		Name:       "lemmas",
		Columns:    LemmasColumns,
		PrimaryKey: []*schema.Column{LemmasColumns[0]},
		Indexes: []*schema.Index{
			{
				Name:    "lemma_written_form",
				Unique:  false,
				Columns: []*schema.Column{LemmasColumns[1]},
			},
		},
	}
	// SensesColumns holds the columns for the "senses" table.
	SensesColumns = []*schema.Column{
		{Name: "id", Type: field.TypeString},
		{Name: "sense_synset", Type: field.TypeString, Nullable: true},
		{Name: "sense_lemma", Type: field.TypeString, Nullable: true},
	}
	// SensesTable holds the schema information for the "senses" table.
	SensesTable = &schema.Table{
		Name:       "senses",
		Columns:    SensesColumns,
		PrimaryKey: []*schema.Column{SensesColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "senses_synsets_synset",
				Columns:    []*schema.Column{SensesColumns[1]},
				RefColumns: []*schema.Column{SynsetsColumns[0]},
				OnDelete:   schema.SetNull,
			},
			{
				Symbol:     "senses_lemmas_lemma",
				Columns:    []*schema.Column{SensesColumns[2]},
				RefColumns: []*schema.Column{LemmasColumns[0]},
				OnDelete:   schema.SetNull,
			},
		},
		Indexes: []*schema.Index{
			{
				Name:    "sense_sense_synset",
				Unique:  false,
				Columns: []*schema.Column{SensesColumns[1]},
			},
			{
				Name:    "sense_sense_lemma",
				Unique:  false,
				Columns: []*schema.Column{SensesColumns[2]},
			},
		},
	}
	// SenseRelationsColumns holds the columns for the "sense_relations" table.
	SenseRelationsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
		{Name: "rel_type", Type: field.TypeString},
		{Name: "sense_relation_from", Type: field.TypeString},
		{Name: "sense_relation_to", Type: field.TypeString},
	}
	// SenseRelationsTable holds the schema information for the "sense_relations" table.
	SenseRelationsTable = &schema.Table{
		Name:       "sense_relations",
		Columns:    SenseRelationsColumns,
		PrimaryKey: []*schema.Column{SenseRelationsColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "sense_relations_senses_from",
				Columns:    []*schema.Column{SenseRelationsColumns[2]},
				RefColumns: []*schema.Column{SensesColumns[0]},
				OnDelete:   schema.NoAction,
			},
			{
				Symbol:     "sense_relations_senses_to",
				Columns:    []*schema.Column{SenseRelationsColumns[3]},
				RefColumns: []*schema.Column{SensesColumns[0]},
				OnDelete:   schema.NoAction,
			},
		},
	}
	// SynsetsColumns holds the columns for the "synsets" table.
	SynsetsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeString},
		{Name: "part_of_speech", Type: field.TypeString},
	}
	// SynsetsTable holds the schema information for the "synsets" table.
	SynsetsTable = &schema.Table{
		Name:       "synsets",
		Columns:    SynsetsColumns,
		PrimaryKey: []*schema.Column{SynsetsColumns[0]},
	}
	// SynsetRelationsColumns holds the columns for the "synset_relations" table.
	SynsetRelationsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
		{Name: "rel_type", Type: field.TypeString},
		{Name: "synset_relation_from", Type: field.TypeString},
		{Name: "synset_relation_to", Type: field.TypeString},
	}
	// SynsetRelationsTable holds the schema information for the "synset_relations" table.
	SynsetRelationsTable = &schema.Table{
		Name:       "synset_relations",
		Columns:    SynsetRelationsColumns,
		PrimaryKey: []*schema.Column{SynsetRelationsColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "synset_relations_synsets_from",
				Columns:    []*schema.Column{SynsetRelationsColumns[2]},
				RefColumns: []*schema.Column{SynsetsColumns[0]},
				OnDelete:   schema.NoAction,
			},
			{
				Symbol:     "synset_relations_synsets_to",
				Columns:    []*schema.Column{SynsetRelationsColumns[3]},
				RefColumns: []*schema.Column{SynsetsColumns[0]},
				OnDelete:   schema.NoAction,
			},
		},
	}
	// Tables holds all the tables in the schema.
	Tables = []*schema.Table{
		DefinitionsTable,
		LemmasTable,
		SensesTable,
		SenseRelationsTable,
		SynsetsTable,
		SynsetRelationsTable,
	}
)

func init() {
	DefinitionsTable.ForeignKeys[0].RefTable = SynsetsTable
	SensesTable.ForeignKeys[0].RefTable = SynsetsTable
	SensesTable.ForeignKeys[1].RefTable = LemmasTable
	SenseRelationsTable.ForeignKeys[0].RefTable = SensesTable
	SenseRelationsTable.ForeignKeys[1].RefTable = SensesTable
	SynsetRelationsTable.ForeignKeys[0].RefTable = SynsetsTable
	SynsetRelationsTable.ForeignKeys[1].RefTable = SynsetsTable
}
