// Code generated by ent, DO NOT EDIT.

package ent

import (
	"github.com/allof-dev/dictionary/ent/definition"
	"github.com/allof-dev/dictionary/ent/lemma"
	"github.com/allof-dev/dictionary/ent/schema"
	"github.com/allof-dev/dictionary/ent/sense"
	"github.com/allof-dev/dictionary/ent/senserelation"
	"github.com/allof-dev/dictionary/ent/synset"
	"github.com/allof-dev/dictionary/ent/synsetrelation"
)

// The init function reads all schema descriptors with runtime code
// (default values, validators, hooks and policies) and stitches it
// to their package variables.
func init() {
	definitionFields := schema.Definition{}.Fields()
	_ = definitionFields
	// definitionDescText is the schema descriptor for text field.
	definitionDescText := definitionFields[0].Descriptor()
	// definition.TextValidator is a validator for the "text" field. It is called by the builders before save.
	definition.TextValidator = definitionDescText.Validators[0].(func(string) error)
	lemmaFields := schema.Lemma{}.Fields()
	_ = lemmaFields
	// lemmaDescWrittenForm is the schema descriptor for writtenForm field.
	lemmaDescWrittenForm := lemmaFields[1].Descriptor()
	// lemma.WrittenFormValidator is a validator for the "writtenForm" field. It is called by the builders before save.
	lemma.WrittenFormValidator = lemmaDescWrittenForm.Validators[0].(func(string) error)
	// lemmaDescPartOfSpeech is the schema descriptor for partOfSpeech field.
	lemmaDescPartOfSpeech := lemmaFields[2].Descriptor()
	// lemma.PartOfSpeechValidator is a validator for the "partOfSpeech" field. It is called by the builders before save.
	lemma.PartOfSpeechValidator = lemmaDescPartOfSpeech.Validators[0].(func(string) error)
	// lemmaDescID is the schema descriptor for id field.
	lemmaDescID := lemmaFields[0].Descriptor()
	// lemma.IDValidator is a validator for the "id" field. It is called by the builders before save.
	lemma.IDValidator = lemmaDescID.Validators[0].(func(string) error)
	senseFields := schema.Sense{}.Fields()
	_ = senseFields
	// senseDescID is the schema descriptor for id field.
	senseDescID := senseFields[0].Descriptor()
	// sense.IDValidator is a validator for the "id" field. It is called by the builders before save.
	sense.IDValidator = senseDescID.Validators[0].(func(string) error)
	senserelationFields := schema.SenseRelation{}.Fields()
	_ = senserelationFields
	// senserelationDescRelType is the schema descriptor for relType field.
	senserelationDescRelType := senserelationFields[0].Descriptor()
	// senserelation.RelTypeValidator is a validator for the "relType" field. It is called by the builders before save.
	senserelation.RelTypeValidator = senserelationDescRelType.Validators[0].(func(string) error)
	synsetFields := schema.Synset{}.Fields()
	_ = synsetFields
	// synsetDescPartOfSpeech is the schema descriptor for partOfSpeech field.
	synsetDescPartOfSpeech := synsetFields[1].Descriptor()
	// synset.PartOfSpeechValidator is a validator for the "partOfSpeech" field. It is called by the builders before save.
	synset.PartOfSpeechValidator = synsetDescPartOfSpeech.Validators[0].(func(string) error)
	// synsetDescID is the schema descriptor for id field.
	synsetDescID := synsetFields[0].Descriptor()
	// synset.IDValidator is a validator for the "id" field. It is called by the builders before save.
	synset.IDValidator = synsetDescID.Validators[0].(func(string) error)
	synsetrelationFields := schema.SynsetRelation{}.Fields()
	_ = synsetrelationFields
	// synsetrelationDescRelType is the schema descriptor for relType field.
	synsetrelationDescRelType := synsetrelationFields[0].Descriptor()
	// synsetrelation.RelTypeValidator is a validator for the "relType" field. It is called by the builders before save.
	synsetrelation.RelTypeValidator = synsetrelationDescRelType.Validators[0].(func(string) error)
}
